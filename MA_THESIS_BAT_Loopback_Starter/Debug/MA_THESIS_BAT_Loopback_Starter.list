
MA_THESIS_BAT_Loopback_Starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e0  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08008bc0  08008bc0  00009bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c24  08008c24  0000a15c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c24  08008c24  00009c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c2c  08008c2c  0000a15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c2c  08008c2c  00009c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08008c34  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009bf4  2000015c  08008d90  0000a15c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20009d50  08008d90  0000ad50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dee  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b9  00000000  00000000  0001bf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8e  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024966  00000000  00000000  00020cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013acd  00000000  00000000  00045664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d451e  00000000  00000000  00059131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d64f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb4  00000000  00000000  0012d694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00131248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000015c 	.word	0x2000015c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008ba8 	.word	0x08008ba8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000160 	.word	0x20000160
 800021c:	08008ba8 	.word	0x08008ba8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000514:	f000 f9d0 	bl	80008b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb75 	bl	8000c06 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000); // wait for adc powerup before applying I2S clocks
 800051c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000520:	f000 fbce 	bl	8000cc0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f814 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8ca 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800052c:	f000 f8aa 	bl	8000684 <MX_DMA_Init>
  MX_I2S1_Init();
 8000530:	f000 f87c 	bl	800062c <MX_I2S1_Init>
  MX_USB_DEVICE_Init();
 8000534:	f007 fc62 	bl	8007dfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s1, adcBuff, ADC_BUFF_SZ/2);
 8000538:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800053c:	4902      	ldr	r1, [pc, #8]	@ (8000548 <main+0x38>)
 800053e:	4803      	ldr	r0, [pc, #12]	@ (800054c <main+0x3c>)
 8000540:	f001 fb84 	bl	8001c4c <HAL_I2S_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x34>
 8000548:	20000218 	.word	0x20000218
 800054c:	20000178 	.word	0x20000178

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	@ 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	@ 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f008 fa94 	bl	8008a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <SystemClock_Config+0xd4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <SystemClock_Config+0xd4>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xd4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <SystemClock_Config+0xd8>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <SystemClock_Config+0xd8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005b8:	2319      	movs	r3, #25
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80005bc:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80005c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005c6:	2309      	movs	r3, #9
 80005c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 ffac 	bl	800352c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005da:	f000 f999 	bl	8000910 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005de:	f002 ff55 	bl	800348c <HAL_PWREx_EnableOverDrive>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005e8:	f000 f992 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2107      	movs	r1, #7
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fa32 	bl	8003a74 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000616:	f000 f97b 	bl	8000910 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	@ 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_I2S1_Init+0x4c>)
 8000632:	4a12      	ldr	r2, [pc, #72]	@ (800067c <MX_I2S1_Init+0x50>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <MX_I2S1_Init+0x4c>)
 8000638:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800063c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_I2S1_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_32B;
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_I2S1_Init+0x4c>)
 8000646:	2205      	movs	r2, #5
 8000648:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <MX_I2S1_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = 160000;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_I2S1_Init+0x4c>)
 8000652:	4a0b      	ldr	r2, [pc, #44]	@ (8000680 <MX_I2S1_Init+0x54>)
 8000654:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <MX_I2S1_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_I2S1_Init+0x4c>)
 800065e:	2202      	movs	r2, #2
 8000660:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_I2S1_Init+0x4c>)
 8000664:	f001 fa0c 	bl	8001a80 <HAL_I2S_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2S1_Init+0x46>
  {
    Error_Handler();
 800066e:	f000 f94f 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000178 	.word	0x20000178
 800067c:	40013000 	.word	0x40013000
 8000680:	00027100 	.word	0x00027100

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_DMA_Init+0x38>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <MX_DMA_Init+0x38>)
 8000690:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_DMA_Init+0x38>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2038      	movs	r0, #56	@ 0x38
 80006a8:	f000 fc09 	bl	8000ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ac:	2038      	movs	r0, #56	@ 0x38
 80006ae:	f000 fc22 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <MX_GPIO_Init+0xd8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a2f      	ldr	r2, [pc, #188]	@ (8000798 <MX_GPIO_Init+0xd8>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_GPIO_Init+0xd8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_GPIO_Init+0xd8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a29      	ldr	r2, [pc, #164]	@ (8000798 <MX_GPIO_Init+0xd8>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_GPIO_Init+0xd8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_GPIO_Init+0xd8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a23      	ldr	r2, [pc, #140]	@ (8000798 <MX_GPIO_Init+0xd8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <MX_GPIO_Init+0xd8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_GPIO_Init+0xd8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a1d      	ldr	r2, [pc, #116]	@ (8000798 <MX_GPIO_Init+0xd8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_GPIO_Init+0xd8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	4818      	ldr	r0, [pc, #96]	@ (800079c <MX_GPIO_Init+0xdc>)
 800073c:	f001 f986 	bl	8001a4c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000746:	4815      	ldr	r0, [pc, #84]	@ (800079c <MX_GPIO_Init+0xdc>)
 8000748:	f001 f980 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	210e      	movs	r1, #14
 8000750:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 8000752:	f001 f97b 	bl	8001a4c <HAL_GPIO_WritePin>



  /*Configure GPIO pins : PC3 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000756:	f44f 7362 	mov.w	r3, #904	@ 0x388
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480b      	ldr	r0, [pc, #44]	@ (800079c <MX_GPIO_Init+0xdc>)
 8000770:	f000 ffd0 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000774:	230e      	movs	r3, #14
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_GPIO_Init+0xe0>)
 800078c:	f000 ffc2 	bl	8001714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000

080007a4 <HAL_I2S_RxHalfCpltCallback>:
/**
  * @brief I2S DMA Half complete callback interrupt handler
  * @param I2S_HandleTypeDef *hi2s the I2S handler
  * @retval None
  */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	int usbBuffcntr = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	// reconstruct left-right samples and fill first half of ADC-buffer to separate USB-buffer
	for(int i = 0; i < ADC_BUFF_SZ/2; i = i + 4){
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	e029      	b.n	800080a <HAL_I2S_RxHalfCpltCallback+0x66>
		usbBuff1[usbBuffcntr] = (int) (adcBuff[i] << 16) | adcBuff[i + 1];
 80007b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <HAL_I2S_RxHalfCpltCallback+0x80>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007be:	041b      	lsls	r3, r3, #16
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	3201      	adds	r2, #1
 80007c4:	4917      	ldr	r1, [pc, #92]	@ (8000824 <HAL_I2S_RxHalfCpltCallback+0x80>)
 80007c6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007ca:	431a      	orrs	r2, r3
 80007cc:	4916      	ldr	r1, [pc, #88]	@ (8000828 <HAL_I2S_RxHalfCpltCallback+0x84>)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		usbBuff1[usbBuffcntr + 1] = (int) (adcBuff[i + 2] << 16) | adcBuff[i + 3];
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3302      	adds	r3, #2
 80007d8:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <HAL_I2S_RxHalfCpltCallback+0x80>)
 80007da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007de:	041a      	lsls	r2, r3, #16
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	3303      	adds	r3, #3
 80007e4:	490f      	ldr	r1, [pc, #60]	@ (8000824 <HAL_I2S_RxHalfCpltCallback+0x80>)
 80007e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007ea:	4619      	mov	r1, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3301      	adds	r3, #1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	490d      	ldr	r1, [pc, #52]	@ (8000828 <HAL_I2S_RxHalfCpltCallback+0x84>)
 80007f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		usbBuffcntr++;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
		usbBuffcntr++;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	3301      	adds	r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < ADC_BUFF_SZ/2; i = i + 4){
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	3304      	adds	r3, #4
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000810:	dbd1      	blt.n	80007b6 <HAL_I2S_RxHalfCpltCallback+0x12>
	}
	CDC_Transmit_FS((uint8_t*) usbBuff1, USB_BUFF_SZ * 4);
 8000812:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000816:	4804      	ldr	r0, [pc, #16]	@ (8000828 <HAL_I2S_RxHalfCpltCallback+0x84>)
 8000818:	f007 fbae 	bl	8007f78 <CDC_Transmit_FS>
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000218 	.word	0x20000218
 8000828:	20004218 	.word	0x20004218

0800082c <HAL_I2S_RxCpltCallback>:
/**
  * @brief I2S DMA complete callback interrupt handler
  * @param I2S_HandleTypeDef *hi2s the I2S handler
  * @retval None
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	//int usbBuffcntr = USB_BUFF_SZ/2;
	int usbBuffcntr = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
	// reconstruct left-right samples and fill final half of ADC-buffer to separate USB-buffer
	for(int i = ADC_BUFF_SZ/2; i < ADC_BUFF_SZ; i = i + 4){
 8000838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	e029      	b.n	8000894 <HAL_I2S_RxCpltCallback+0x68>
		usbBuff2[usbBuffcntr] = (int) (adcBuff[i] << 16) | adcBuff[i + 1];
 8000840:	4a1b      	ldr	r2, [pc, #108]	@ (80008b0 <HAL_I2S_RxCpltCallback+0x84>)
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	3201      	adds	r2, #1
 800084e:	4918      	ldr	r1, [pc, #96]	@ (80008b0 <HAL_I2S_RxCpltCallback+0x84>)
 8000850:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000854:	431a      	orrs	r2, r3
 8000856:	4917      	ldr	r1, [pc, #92]	@ (80008b4 <HAL_I2S_RxCpltCallback+0x88>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		usbBuff2[usbBuffcntr + 1] = (int) (adcBuff[i + 2] << 16) | adcBuff[i + 3];
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	3302      	adds	r3, #2
 8000862:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <HAL_I2S_RxCpltCallback+0x84>)
 8000864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000868:	041a      	lsls	r2, r3, #16
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	3303      	adds	r3, #3
 800086e:	4910      	ldr	r1, [pc, #64]	@ (80008b0 <HAL_I2S_RxCpltCallback+0x84>)
 8000870:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000874:	4619      	mov	r1, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <HAL_I2S_RxCpltCallback+0x88>)
 800087e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		usbBuffcntr++;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
		usbBuffcntr++;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
	for(int i = ADC_BUFF_SZ/2; i < ADC_BUFF_SZ; i = i + 4){
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3304      	adds	r3, #4
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089a:	dbd1      	blt.n	8000840 <HAL_I2S_RxCpltCallback+0x14>
	}
	CDC_Transmit_FS((uint8_t*) usbBuff2, USB_BUFF_SZ * 4);
 800089c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <HAL_I2S_RxCpltCallback+0x88>)
 80008a2:	f007 fb69 	bl	8007f78 <CDC_Transmit_FS>
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000218 	.word	0x20000218
 80008b4:	20006218 	.word	0x20006218

080008b8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ca:	f000 fb2f 	bl	8000f2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008da:	231f      	movs	r3, #31
 80008dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008de:	2387      	movs	r3, #135	@ 0x87
 80008e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008e6:	2300      	movs	r3, #0
 80008e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ea:	2301      	movs	r3, #1
 80008ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ee:	2301      	movs	r3, #1
 80008f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fb4d 	bl	8000f9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000902:	2004      	movs	r0, #4
 8000904:	f000 fb2a 	bl	8000f5c <HAL_MPU_Enable>

}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x44>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x44>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_MspInit+0x44>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_MspInit+0x44>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_MspInit+0x44>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0aa      	sub	sp, #168	@ 0xa8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f008 f881 	bl	8008a8c <memset>
  if(hi2s->Instance==SPI1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a88 <HAL_I2S_MspInit+0x124>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d174      	bne.n	8000a7e <HAL_I2S_MspInit+0x11a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000994:	2301      	movs	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 205;
 8000998:	23cd      	movs	r3, #205	@ 0xcd
 800099a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80009a8:	2300      	movs	r3, #0
 80009aa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 fa1d 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 80009bc:	f7ff ffa8 	bl	8000910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c0:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <HAL_I2S_MspInit+0x128>)
 80009c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c4:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <HAL_I2S_MspInit+0x128>)
 80009c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80009cc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a8c <HAL_I2S_MspInit+0x128>)
 80009ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a8c <HAL_I2S_MspInit+0x128>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009dc:	4a2b      	ldr	r2, [pc, #172]	@ (8000a8c <HAL_I2S_MspInit+0x128>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e4:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <HAL_I2S_MspInit+0x128>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80009f0:	23b0      	movs	r3, #176	@ 0xb0
 80009f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a08:	2305      	movs	r3, #5
 8000a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a12:	4619      	mov	r1, r3
 8000a14:	481e      	ldr	r0, [pc, #120]	@ (8000a90 <HAL_I2S_MspInit+0x12c>)
 8000a16:	f000 fe7d 	bl	8001714 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_I2S_MspInit+0x134>)
 8000a1e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a22:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000a26:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a3a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a42:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a4a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a52:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a5a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a64:	f000 fade 	bl	8001024 <HAL_DMA_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8000a6e:	f7ff ff4f 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a78:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <HAL_I2S_MspInit+0x130>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	37a8      	adds	r7, #168	@ 0xa8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	200001b8 	.word	0x200001b8
 8000a98:	40026410 	.word	0x40026410

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af2:	f000 f8c5 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <DMA2_Stream0_IRQHandler+0x10>)
 8000b02:	f000 fb9d 	bl	8001240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001b8 	.word	0x200001b8

08000b10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <OTG_FS_IRQHandler+0x10>)
 8000b16:	f001 fb46 	bl	80021a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20009700 	.word	0x20009700

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f007 ffb2 	bl	8008abc <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20040000 	.word	0x20040000
 8000b84:	00004000 	.word	0x00004000
 8000b88:	20008218 	.word	0x20008218
 8000b8c:	20009d50 	.word	0x20009d50

08000b90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	@ (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	@ (8000bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8000c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f007 ff71 	bl	8008ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fc93 	bl	8000510 <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000bf8:	08008c34 	.word	0x08008c34
  ldr r2, =_sbss
 8000bfc:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000c00:	20009d50 	.word	0x20009d50

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>

08000c06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f94c 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c10:	200f      	movs	r0, #15
 8000c12:	f000 f805 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c16:	f7ff fe81 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f967 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f92f 	bl	8000ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	2000821c 	.word	0x2000821c

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000821c 	.word	0x2000821c

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffde 	bl	8000ca8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x40>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x40>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	05fa0000 	.word	0x05fa0000

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	@ (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff29 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff3e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff31 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f30:	f3bf 8f5f 	dmb	sy
}
 8000f34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <HAL_MPU_Disable+0x28>)
 8000f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3a:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <HAL_MPU_Disable+0x28>)
 8000f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f40:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_MPU_Disable+0x2c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	e000ed90 	.word	0xe000ed90

08000f5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f64:	4a0b      	ldr	r2, [pc, #44]	@ (8000f94 <HAL_MPU_Enable+0x38>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_MPU_Enable+0x3c>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f72:	4a09      	ldr	r2, [pc, #36]	@ (8000f98 <HAL_MPU_Enable+0x3c>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f7a:	f3bf 8f4f 	dsb	sy
}
 8000f7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f80:	f3bf 8f6f 	isb	sy
}
 8000f84:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed90 	.word	0xe000ed90
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	785a      	ldrb	r2, [r3, #1]
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_MPU_ConfigRegion+0x84>)
 8000faa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d029      	beq.n	8001008 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001020 <HAL_MPU_ConfigRegion+0x84>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7b1b      	ldrb	r3, [r3, #12]
 8000fc0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7adb      	ldrb	r3, [r3, #11]
 8000fc6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7a9b      	ldrb	r3, [r3, #10]
 8000fce:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7b5b      	ldrb	r3, [r3, #13]
 8000fd6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7b9b      	ldrb	r3, [r3, #14]
 8000fde:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fe0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7bdb      	ldrb	r3, [r3, #15]
 8000fe6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fe8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7a5b      	ldrb	r3, [r3, #9]
 8000fee:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ff0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7a1b      	ldrb	r3, [r3, #8]
 8000ff6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ff8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001002:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001004:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001006:	e005      	b.n	8001014 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001008:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <HAL_MPU_ConfigRegion+0x84>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <HAL_MPU_ConfigRegion+0x84>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed90 	.word	0xe000ed90

08001024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fe3a 	bl	8000ca8 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e099      	b.n	8001174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2202      	movs	r2, #2
 8001044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001060:	e00f      	b.n	8001082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001062:	f7ff fe21 	bl	8000ca8 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b05      	cmp	r3, #5
 800106e:	d908      	bls.n	8001082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2220      	movs	r2, #32
 8001074:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2203      	movs	r2, #3
 800107a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e078      	b.n	8001174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e8      	bne.n	8001062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	4b38      	ldr	r3, [pc, #224]	@ (800117c <HAL_DMA_Init+0x158>)
 800109c:	4013      	ands	r3, r2
 800109e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d107      	bne.n	80010ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	4313      	orrs	r3, r2
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f023 0307 	bic.w	r3, r3, #7
 8001102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	4313      	orrs	r3, r2
 800110c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	2b04      	cmp	r3, #4
 8001114:	d117      	bne.n	8001146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4313      	orrs	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00e      	beq.n	8001146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fa77 	bl	800161c <DMA_CheckFifoParam>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d008      	beq.n	8001146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2240      	movs	r2, #64	@ 0x40
 8001138:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001142:	2301      	movs	r3, #1
 8001144:	e016      	b.n	8001174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fa2e 	bl	80015b0 <DMA_CalcBaseAndBitshift>
 8001154:	4603      	mov	r3, r0
 8001156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115c:	223f      	movs	r2, #63	@ 0x3f
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	e010803f 	.word	0xe010803f

08001180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001196:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_DMA_Start_IT+0x26>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e048      	b.n	8001238 <HAL_DMA_Start_IT+0xb8>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d137      	bne.n	800122a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2202      	movs	r2, #2
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 f9c0 	bl	8001554 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d8:	223f      	movs	r2, #63	@ 0x3f
 80011da:	409a      	lsls	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0216 	orr.w	r2, r2, #22
 80011ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0208 	orr.w	r2, r2, #8
 8001216:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e005      	b.n	8001236 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001232:	2302      	movs	r3, #2
 8001234:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001236:	7dfb      	ldrb	r3, [r7, #23]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800124c:	4b8e      	ldr	r3, [pc, #568]	@ (8001488 <HAL_DMA_IRQHandler+0x248>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a8e      	ldr	r2, [pc, #568]	@ (800148c <HAL_DMA_IRQHandler+0x24c>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0a9b      	lsrs	r3, r3, #10
 8001258:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126a:	2208      	movs	r2, #8
 800126c:	409a      	lsls	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d01a      	beq.n	80012ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001298:	2208      	movs	r2, #8
 800129a:	409a      	lsls	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012a4:	f043 0201 	orr.w	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b0:	2201      	movs	r2, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d012      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ce:	2201      	movs	r2, #1
 80012d0:	409a      	lsls	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012da:	f043 0202 	orr.w	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e6:	2204      	movs	r2, #4
 80012e8:	409a      	lsls	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d012      	beq.n	8001318 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001304:	2204      	movs	r2, #4
 8001306:	409a      	lsls	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001310:	f043 0204 	orr.w	r2, r3, #4
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800131c:	2210      	movs	r2, #16
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d043      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03c      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133a:	2210      	movs	r2, #16
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d018      	beq.n	8001382 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d108      	bne.n	8001370 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d024      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
 800136e:	e01f      	b.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01b      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
 8001380:	e016      	b.n	80013b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0208 	bic.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b4:	2220      	movs	r2, #32
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 808f 	beq.w	80014e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8087 	beq.w	80014e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d6:	2220      	movs	r2, #32
 80013d8:	409a      	lsls	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d136      	bne.n	8001458 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0216 	bic.w	r2, r2, #22
 80013f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001408:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d103      	bne.n	800141a <HAL_DMA_IRQHandler+0x1da>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0208 	bic.w	r2, r2, #8
 8001428:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142e:	223f      	movs	r2, #63	@ 0x3f
 8001430:	409a      	lsls	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800144a:	2b00      	cmp	r3, #0
 800144c:	d07e      	beq.n	800154c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
        }
        return;
 8001456:	e079      	b.n	800154c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01d      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10d      	bne.n	8001490 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001478:	2b00      	cmp	r3, #0
 800147a:	d031      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
 8001484:	e02c      	b.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
 8001486:	bf00      	nop
 8001488:	20000000 	.word	0x20000000
 800148c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	e01e      	b.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0210 	bic.w	r2, r2, #16
 80014be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d032      	beq.n	800154e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d022      	beq.n	800153a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2205      	movs	r2, #5
 80014f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3301      	adds	r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	d307      	bcc.n	8001528 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f2      	bne.n	800150c <HAL_DMA_IRQHandler+0x2cc>
 8001526:	e000      	b.n	800152a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001528:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
 800154a:	e000      	b.n	800154e <HAL_DMA_IRQHandler+0x30e>
        return;
 800154c:	bf00      	nop
    }
  }
}
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001570:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b40      	cmp	r3, #64	@ 0x40
 8001580:	d108      	bne.n	8001594 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001592:	e007      	b.n	80015a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	60da      	str	r2, [r3, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	3b10      	subs	r3, #16
 80015c0:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <DMA_CalcBaseAndBitshift+0x60>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <DMA_CalcBaseAndBitshift+0x64>)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d908      	bls.n	80015f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <DMA_CalcBaseAndBitshift+0x68>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	1d1a      	adds	r2, r3, #4
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80015ee:	e006      	b.n	80015fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <DMA_CalcBaseAndBitshift+0x68>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	aaaaaaab 	.word	0xaaaaaaab
 8001614:	08008c1c 	.word	0x08008c1c
 8001618:	fffffc00 	.word	0xfffffc00

0800161c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d11f      	bne.n	8001676 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d856      	bhi.n	80016ea <DMA_CheckFifoParam+0xce>
 800163c:	a201      	add	r2, pc, #4	@ (adr r2, 8001644 <DMA_CheckFifoParam+0x28>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001655 	.word	0x08001655
 8001648:	08001667 	.word	0x08001667
 800164c:	08001655 	.word	0x08001655
 8001650:	080016eb 	.word	0x080016eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d046      	beq.n	80016ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001664:	e043      	b.n	80016ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800166e:	d140      	bne.n	80016f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001674:	e03d      	b.n	80016f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800167e:	d121      	bne.n	80016c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d837      	bhi.n	80016f6 <DMA_CheckFifoParam+0xda>
 8001686:	a201      	add	r2, pc, #4	@ (adr r2, 800168c <DMA_CheckFifoParam+0x70>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080016a3 	.word	0x080016a3
 8001694:	0800169d 	.word	0x0800169d
 8001698:	080016b5 	.word	0x080016b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      break;
 80016a0:	e030      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d025      	beq.n	80016fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b2:	e022      	b.n	80016fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016bc:	d11f      	bne.n	80016fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016c2:	e01c      	b.n	80016fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d903      	bls.n	80016d2 <DMA_CheckFifoParam+0xb6>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d003      	beq.n	80016d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016d0:	e018      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
      break;
 80016d6:	e015      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00e      	beq.n	8001702 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
      break;
 80016e8:	e00b      	b.n	8001702 <DMA_CheckFifoParam+0xe6>
      break;
 80016ea:	bf00      	nop
 80016ec:	e00a      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 80016ee:	bf00      	nop
 80016f0:	e008      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 80016f2:	bf00      	nop
 80016f4:	e006      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 80016f6:	bf00      	nop
 80016f8:	e004      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 80016fa:	bf00      	nop
 80016fc:	e002      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;   
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <DMA_CheckFifoParam+0xe8>
      break;
 8001702:	bf00      	nop
    }
  } 
  
  return status; 
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e169      	b.n	8001a08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 8158 	bne.w	8001a02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d005      	beq.n	800176a <HAL_GPIO_Init+0x56>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d130      	bne.n	80017cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d017      	beq.n	8001808 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80b2 	beq.w	8001a02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b60      	ldr	r3, [pc, #384]	@ (8001a20 <HAL_GPIO_Init+0x30c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a20 <HAL_GPIO_Init+0x30c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a20 <HAL_GPIO_Init+0x30c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a24 <HAL_GPIO_Init+0x310>)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	@ (8001a28 <HAL_GPIO_Init+0x314>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d02b      	beq.n	800193a <HAL_GPIO_Init+0x226>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a51      	ldr	r2, [pc, #324]	@ (8001a2c <HAL_GPIO_Init+0x318>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x222>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a50      	ldr	r2, [pc, #320]	@ (8001a30 <HAL_GPIO_Init+0x31c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x21e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a34 <HAL_GPIO_Init+0x320>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x21a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a38 <HAL_GPIO_Init+0x324>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x216>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4d      	ldr	r2, [pc, #308]	@ (8001a3c <HAL_GPIO_Init+0x328>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x212>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a40 <HAL_GPIO_Init+0x32c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4b      	ldr	r2, [pc, #300]	@ (8001a44 <HAL_GPIO_Init+0x330>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x20a>
 800191a:	2307      	movs	r3, #7
 800191c:	e00e      	b.n	800193c <HAL_GPIO_Init+0x228>
 800191e:	2308      	movs	r3, #8
 8001920:	e00c      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001922:	2306      	movs	r3, #6
 8001924:	e00a      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001926:	2305      	movs	r3, #5
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x228>
 800192a:	2304      	movs	r3, #4
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x228>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x228>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x228>
 800193a:	2300      	movs	r3, #0
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800194c:	4935      	ldr	r1, [pc, #212]	@ (8001a24 <HAL_GPIO_Init+0x310>)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a32      	ldr	r2, [pc, #200]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b30      	ldr	r3, [pc, #192]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a27      	ldr	r2, [pc, #156]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ae:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fc:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <HAL_GPIO_Init+0x334>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	f67f ae92 	bls.w	8001734 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40021400 	.word	0x40021400
 8001a40:	40021800 	.word	0x40021800
 8001a44:	40021c00 	.word	0x40021c00
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0d2      	b.n	8001c38 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe ff5c 	bl	8000964 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69d9      	ldr	r1, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b60      	ldr	r3, [pc, #384]	@ (8001c40 <HAL_I2S_Init+0x1c0>)
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d067      	beq.n	8001ba4 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001adc:	2310      	movs	r3, #16
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e001      	b.n	8001ae6 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	d802      	bhi.n	8001af4 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d102      	bne.n	8001b02 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8001afc:	4b51      	ldr	r3, [pc, #324]	@ (8001c44 <HAL_I2S_Init+0x1c4>)
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e003      	b.n	8001b0a <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f968 	bl	8001dd8 <I2S_GetClockFreq>
 8001b08:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b12:	d125      	bne.n	8001b60 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	3305      	adds	r3, #5
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	e01f      	b.n	8001b7e <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	461a      	mov	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	3305      	adds	r3, #5
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e00e      	b.n	8001b7e <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	461a      	mov	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	3305      	adds	r3, #5
 8001b7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4a31      	ldr	r2, [pc, #196]	@ (8001c48 <HAL_I2S_Init+0x1c8>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	08db      	lsrs	r3, r3, #3
 8001b88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	e003      	b.n	8001bac <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d902      	bls.n	8001bb8 <HAL_I2S_Init+0x138>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2bff      	cmp	r3, #255	@ 0xff
 8001bb6:	d907      	bls.n	8001bc8 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbc:	f043 0210 	orr.w	r2, r3, #16
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e037      	b.n	8001c38 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	ea42 0103 	orr.w	r1, r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_I2S_Init+0x1c0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6851      	ldr	r1, [r2, #4]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6892      	ldr	r2, [r2, #8]
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68d2      	ldr	r2, [r2, #12]
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6992      	ldr	r2, [r2, #24]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c06:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b30      	cmp	r3, #48	@ 0x30
 8001c0e:	d003      	beq.n	8001c18 <HAL_I2S_Init+0x198>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2bb0      	cmp	r3, #176	@ 0xb0
 8001c16:	d107      	bne.n	8001c28 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	fffff040 	.word	0xfffff040
 8001c44:	00bb8000 	.word	0x00bb8000
 8001c48:	cccccccd 	.word	0xcccccccd

08001c4c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	4613      	mov	r3, r2
 8001c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_I2S_Receive_DMA+0x1a>
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0a1      	b.n	8001dae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_I2S_Receive_DMA+0x2e>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e099      	b.n	8001dae <HAL_I2S_Receive_DMA+0x162>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d005      	beq.n	8001c9a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	e089      	b.n	8001dae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d002      	beq.n	8001cc6 <HAL_I2S_Receive_DMA+0x7a>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d10a      	bne.n	8001cdc <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8001cda:	e005      	b.n	8001ce8 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	88fa      	ldrh	r2, [r7, #6]
 8001ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cec:	4a32      	ldr	r2, [pc, #200]	@ (8001db8 <HAL_I2S_Receive_DMA+0x16c>)
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf4:	4a31      	ldr	r2, [pc, #196]	@ (8001dbc <HAL_I2S_Receive_DMA+0x170>)
 8001cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfc:	4a30      	ldr	r2, [pc, #192]	@ (8001dc0 <HAL_I2S_Receive_DMA+0x174>)
 8001cfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d0e:	d10a      	bne.n	8001d26 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	330c      	adds	r3, #12
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001d3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001d3e:	f7ff fa1f 	bl	8001180 <HAL_DMA_Start_IT>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00f      	beq.n	8001d68 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4c:	f043 0208 	orr.w	r2, r3, #8
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	63da      	str	r2, [r3, #60]	@ 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    __HAL_UNLOCK(hi2s);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e022      	b.n	8001dae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d107      	bne.n	8001d86 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d84:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	08001eb3 	.word	0x08001eb3
 8001dbc:	08001e71 	.word	0x08001e71
 8001dc0:	08001ecf 	.word	0x08001ecf

08001dc4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d02d      	beq.n	8001e44 <I2S_GetClockFreq+0x6c>
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d12e      	bne.n	8001e4a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001dec:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <I2S_GetClockFreq+0x88>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d108      	bne.n	8001e0a <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <I2S_GetClockFreq+0x88>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e00:	4a18      	ldr	r2, [pc, #96]	@ (8001e64 <I2S_GetClockFreq+0x8c>)
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e007      	b.n	8001e1a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <I2S_GetClockFreq+0x88>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e12:	4a15      	ldr	r2, [pc, #84]	@ (8001e68 <I2S_GetClockFreq+0x90>)
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <I2S_GetClockFreq+0x88>)
 8001e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e20:	0f1b      	lsrs	r3, r3, #28
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8001e28:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <I2S_GetClockFreq+0x88>)
 8001e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	613b      	str	r3, [r7, #16]

      break;
 8001e42:	e005      	b.n	8001e50 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <I2S_GetClockFreq+0x94>)
 8001e46:	613b      	str	r3, [r7, #16]
      break;
 8001e48:	e002      	b.n	8001e50 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
      break;
 8001e4e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8001e50:	693b      	ldr	r3, [r7, #16]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	017d7840 	.word	0x017d7840
 8001e6c:	00bb8000 	.word	0x00bb8000

08001e70 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7fe fcc1 	bl	800082c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7fe fc6f 	bl	80007a4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0203 	bic.w	r2, r2, #3
 8001eea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	84da      	strh	r2, [r3, #38]	@ 0x26
  hi2s->RxXferCount = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f04:	f043 0208 	orr.w	r2, r3, #8
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff ff59 	bl	8001dc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1c:	b08f      	sub	sp, #60	@ 0x3c
 8001f1e:	af0a      	add	r7, sp, #40	@ 0x28
 8001f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e116      	b.n	800215a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f006 f970 	bl	800822c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 fbd3 	bl	8004716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	687e      	ldr	r6, [r7, #4]
 8001f78:	466d      	mov	r5, sp
 8001f7a:	f106 0410 	add.w	r4, r6, #16
 8001f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8e:	1d33      	adds	r3, r6, #4
 8001f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f002 fa76 	bl	8004484 <USB_CoreInit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0d7      	b.n	800215a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fbc1 	bl	8004738 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e04a      	b.n	8002052 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	333d      	adds	r3, #61	@ 0x3d
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	333c      	adds	r3, #60	@ 0x3c
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	b298      	uxth	r0, r3
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3344      	adds	r3, #68	@ 0x44
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3340      	adds	r3, #64	@ 0x40
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3348      	adds	r3, #72	@ 0x48
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	334c      	adds	r3, #76	@ 0x4c
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	3354      	adds	r3, #84	@ 0x54
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3301      	adds	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3af      	bcc.n	8001fbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e044      	b.n	80020ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	3301      	adds	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d3b5      	bcc.n	8002062 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	687e      	ldr	r6, [r7, #4]
 80020fe:	466d      	mov	r5, sp
 8002100:	f106 0410 	add.w	r4, r6, #16
 8002104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002110:	e885 0003 	stmia.w	r5, {r0, r1}
 8002114:	1d33      	adds	r3, r6, #4
 8002116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f002 fb59 	bl	80047d0 <USB_DevInit>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e014      	b.n	800215a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f001 f97b 	bl	8003444 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f003 fcb7 	bl	8005ac6 <USB_DevDisconnect>

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002162 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_PCD_Start+0x16>
 8002174:	2302      	movs	r3, #2
 8002176:	e012      	b.n	800219e <HAL_PCD_Start+0x3c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fab5 	bl	80046f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fc78 	bl	8005a84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021a6:	b590      	push	{r4, r7, lr}
 80021a8:	b08d      	sub	sp, #52	@ 0x34
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fd36 	bl	8005c2e <USB_GetMode>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 84b7 	bne.w	8002b38 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fc9a 	bl	8005b08 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 84ad 	beq.w	8002b36 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 fc87 	bl	8005b08 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b02      	cmp	r3, #2
 8002202:	d107      	bne.n	8002214 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f002 0202 	and.w	r2, r2, #2
 8002212:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f003 fc75 	bl	8005b08 <USB_ReadInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d161      	bne.n	80022ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0210 	bic.w	r2, r2, #16
 8002236:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	0c5b      	lsrs	r3, r3, #17
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	2b02      	cmp	r3, #2
 8002262:	d124      	bne.n	80022ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d035      	beq.n	80022dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800227a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	6a38      	ldr	r0, [r7, #32]
 8002284:	f003 faac 	bl	80057e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002294:	441a      	add	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a6:	441a      	add	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	621a      	str	r2, [r3, #32]
 80022ac:	e016      	b.n	80022dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	0c5b      	lsrs	r3, r3, #17
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d110      	bne.n	80022dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80022c0:	2208      	movs	r2, #8
 80022c2:	4619      	mov	r1, r3
 80022c4:	6a38      	ldr	r0, [r7, #32]
 80022c6:	f003 fa8b 	bl	80057e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d6:	441a      	add	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0210 	orr.w	r2, r2, #16
 80022ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fc09 	bl	8005b08 <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002300:	f040 80a7 	bne.w	8002452 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fc0e 	bl	8005b2e <USB_ReadDevAllOutEpInterrupt>
 8002312:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002314:	e099      	b.n	800244a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 808e 	beq.w	800243e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fc32 	bl	8005b96 <USB_ReadDevOutEPInterrupt>
 8002332:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002350:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fef0 	bl	8003138 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	2308      	movs	r3, #8
 8002372:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 ffc6 	bl	8003308 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002392:	461a      	mov	r2, r3
 8002394:	2310      	movs	r3, #16
 8002396:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d030      	beq.n	8002404 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b80      	cmp	r3, #128	@ 0x80
 80023ac:	d109      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	3304      	adds	r3, #4
 80023d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	78db      	ldrb	r3, [r3, #3]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2200      	movs	r2, #0
 80023e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f006 f841 	bl	8008474 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023fe:	461a      	mov	r2, r3
 8002400:	2302      	movs	r3, #2
 8002402:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800241a:	461a      	mov	r2, r3
 800241c:	2320      	movs	r3, #32
 800241e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800243c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	3301      	adds	r3, #1
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	f47f af62 	bne.w	8002316 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fb56 	bl	8005b08 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002466:	f040 80db 	bne.w	8002620 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 fb77 	bl	8005b62 <USB_ReadDevAllInEpInterrupt>
 8002474:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800247a:	e0cd      	b.n	8002618 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80c2 	beq.w	800260c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f003 fb9d 	bl	8005bd2 <USB_ReadDevInEPInterrupt>
 8002498:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d057      	beq.n	8002554 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	2201      	movs	r2, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69f9      	ldr	r1, [r7, #28]
 80024c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024c4:	4013      	ands	r3, r2
 80024c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024d4:	461a      	mov	r2, r3
 80024d6:	2301      	movs	r3, #1
 80024d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d132      	bne.n	8002548 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	334c      	adds	r3, #76	@ 0x4c
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4403      	add	r3, r0
 8002502:	3348      	adds	r3, #72	@ 0x48
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4419      	add	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4403      	add	r3, r0
 8002516:	334c      	adds	r3, #76	@ 0x4c
 8002518:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d113      	bne.n	8002548 <HAL_PCD_IRQHandler+0x3a2>
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	3354      	adds	r3, #84	@ 0x54
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d108      	bne.n	8002548 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002540:	461a      	mov	r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	f003 fba6 	bl	8005c94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	b2db      	uxtb	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f005 ff0b 	bl	800836a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800256a:	461a      	mov	r2, r3
 800256c:	2308      	movs	r3, #8
 800256e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002586:	461a      	mov	r2, r3
 8002588:	2310      	movs	r3, #16
 800258a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a2:	461a      	mov	r2, r3
 80025a4:	2340      	movs	r3, #64	@ 0x40
 80025a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d023      	beq.n	80025fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025b4:	6a38      	ldr	r0, [r7, #32]
 80025b6:	f002 fa79 	bl	8004aac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	3338      	adds	r3, #56	@ 0x38
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	78db      	ldrb	r3, [r3, #3]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f005 ff58 	bl	8008498 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025f4:	461a      	mov	r2, r3
 80025f6:	2302      	movs	r3, #2
 80025f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fd08 	bl	800301c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	3301      	adds	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	f47f af2e 	bne.w	800247c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fa6f 	bl	8005b08 <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002630:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002634:	d122      	bne.n	800267c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002650:	2b01      	cmp	r3, #1
 8002652:	d108      	bne.n	8002666 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800265c:	2100      	movs	r1, #0
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f006 f8d6 	bl	8008810 <HAL_PCDEx_LPM_Callback>
 8002664:	e002      	b.n	800266c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f005 fef6 	bl	8008458 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800267a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fa41 	bl	8005b08 <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800268c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002690:	d112      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f005 feb2 	bl	800840c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80026b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fa23 	bl	8005b08 <USB_ReadInterrupts>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026cc:	d121      	bne.n	8002712 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80026dc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d111      	bne.n	800270c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	f003 020f 	and.w	r2, r3, #15
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002702:	2101      	movs	r1, #1
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f006 f883 	bl	8008810 <HAL_PCDEx_LPM_Callback>
 800270a:	e002      	b.n	8002712 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f005 fe7d 	bl	800840c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 f9f6 	bl	8005b08 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002726:	f040 80b7 	bne.w	8002898 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2110      	movs	r1, #16
 8002744:	4618      	mov	r0, r3
 8002746:	f002 f9b1 	bl	8004aac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800274e:	e046      	b.n	80027de <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800275c:	461a      	mov	r2, r3
 800275e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002762:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	440a      	add	r2, r1
 800277a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800277e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002782:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002790:	461a      	mov	r2, r3
 8002792:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002796:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027da:	3301      	adds	r3, #1
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d3b3      	bcc.n	8002750 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80027fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	2b00      	cmp	r3, #0
 8002802:	d016      	beq.n	8002832 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800280a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002814:	f043 030b 	orr.w	r3, r3, #11
 8002818:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800282a:	f043 030b 	orr.w	r3, r3, #11
 800282e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002830:	e015      	b.n	800285e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002840:	4619      	mov	r1, r3
 8002842:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002846:	4313      	orrs	r3, r2
 8002848:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002858:	f043 030b 	orr.w	r3, r3, #11
 800285c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800286c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002870:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002882:	461a      	mov	r2, r3
 8002884:	f003 fa06 	bl	8005c94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f003 f933 	bl	8005b08 <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028ac:	d124      	bne.n	80028f8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 f9ca 	bl	8005c4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 f972 	bl	8004ba6 <USB_GetDevSpeed>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681c      	ldr	r4, [r3, #0]
 80028ce:	f001 fa83 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 80028d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	4620      	mov	r0, r4
 80028de:	f001 fe67 	bl	80045b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f005 fd69 	bl	80083ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80028f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 f903 	bl	8005b08 <USB_ReadInterrupts>
 8002902:	4603      	mov	r3, r0
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b08      	cmp	r3, #8
 800290a:	d10a      	bne.n	8002922 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f005 fd46 	bl	800839e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f002 0208 	and.w	r2, r2, #8
 8002920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f003 f8ee 	bl	8005b08 <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002932:	2b80      	cmp	r3, #128	@ 0x80
 8002934:	d122      	bne.n	800297c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002942:	2301      	movs	r3, #1
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
 8002946:	e014      	b.n	8002972 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fb27 	bl	8002fba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	3301      	adds	r3, #1
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	429a      	cmp	r2, r3
 800297a:	d3e5      	bcc.n	8002948 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 f8c1 	bl	8005b08 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800298c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002990:	d13b      	bne.n	8002a0a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002992:	2301      	movs	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
 8002996:	e02b      	b.n	80029f0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3340      	adds	r3, #64	@ 0x40
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d115      	bne.n	80029ea <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da12      	bge.n	80029ea <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	333f      	adds	r3, #63	@ 0x3f
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fae8 	bl	8002fba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	3301      	adds	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d3ce      	bcc.n	8002998 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 f87a 	bl	8005b08 <USB_ReadInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a1e:	d155      	bne.n	8002acc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a20:	2301      	movs	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a24:	e045      	b.n	8002ab2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d12e      	bne.n	8002aac <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da2b      	bge.n	8002aac <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002a60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d121      	bne.n	8002aac <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa8:	6053      	str	r3, [r2, #4]
            break;
 8002aaa:	e007      	b.n	8002abc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	3301      	adds	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d3b4      	bcc.n	8002a26 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f003 f819 	bl	8005b08 <USB_ReadInterrupts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae0:	d10a      	bne.n	8002af8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f005 fcea 	bl	80084bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 f803 	bl	8005b08 <USB_ReadInterrupts>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d115      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f005 fcda 	bl	80084d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	e000      	b.n	8002b38 <HAL_PCD_IRQHandler+0x992>
      return;
 8002b36:	bf00      	nop
    }
  }
}
 8002b38:	3734      	adds	r7, #52	@ 0x34
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd90      	pop	{r4, r7, pc}

08002b3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_PCD_SetAddress+0x1a>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e013      	b.n	8002b80 <HAL_PCD_SetAddress+0x42>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f002 ff61 	bl	8005a38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	70fb      	strb	r3, [r7, #3]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	803b      	strh	r3, [r7, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da0f      	bge.n	8002bce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	f003 020f 	and.w	r2, r3, #15
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	3338      	adds	r3, #56	@ 0x38
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	705a      	strb	r2, [r3, #1]
 8002bcc:	e00f      	b.n	8002bee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bfa:	883a      	ldrh	r2, [r7, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	78ba      	ldrb	r2, [r7, #2]
 8002c04:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c18:	78bb      	ldrb	r3, [r7, #2]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d102      	bne.n	8002c24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_PCD_EP_Open+0xaa>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e00e      	b.n	8002c50 <HAL_PCD_EP_Open+0xc8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68f9      	ldr	r1, [r7, #12]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 ffd5 	bl	8004bf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	da0f      	bge.n	8002c8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	3338      	adds	r3, #56	@ 0x38
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3304      	adds	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	705a      	strb	r2, [r3, #1]
 8002c8a:	e00f      	b.n	8002cac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 020f 	and.w	r2, r3, #15
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_PCD_EP_Close+0x6e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e00e      	b.n	8002ce4 <HAL_PCD_EP_Close+0x8c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 f813 	bl	8004d00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfc:	7afb      	ldrb	r3, [r7, #11]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d48:	7afb      	ldrb	r3, [r7, #11]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	6979      	ldr	r1, [r7, #20]
 8002d60:	f002 fafa 	bl	8005358 <USB_EP0StartXfer>
 8002d64:	e008      	b.n	8002d78 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	6979      	ldr	r1, [r7, #20]
 8002d74:	f002 f8a0 	bl	8004eb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 020f 	and.w	r2, r3, #15
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8002da4:	681b      	ldr	r3, [r3, #0]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3338      	adds	r3, #56	@ 0x38
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2201      	movs	r2, #1
 8002df0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	6979      	ldr	r1, [r7, #20]
 8002e24:	f002 fa98 	bl	8005358 <USB_EP0StartXfer>
 8002e28:	e008      	b.n	8002e3c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	f002 f83e 	bl	8004eb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f003 020f 	and.w	r2, r3, #15
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d901      	bls.n	8002e64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e050      	b.n	8002f06 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da0f      	bge.n	8002e8c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	3338      	adds	r3, #56	@ 0x38
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]
 8002e8a:	e00d      	b.n	8002ea8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_PCD_EP_SetStall+0x82>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e01e      	b.n	8002f06 <HAL_PCD_EP_SetStall+0xc0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 fcda 	bl	8005890 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	b2d9      	uxtb	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f002 fecc 	bl	8005c94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d901      	bls.n	8002f2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e042      	b.n	8002fb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	da0f      	bge.n	8002f54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	3338      	adds	r3, #56	@ 0x38
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	3304      	adds	r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	705a      	strb	r2, [r3, #1]
 8002f52:	e00f      	b.n	8002f74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 020f 	and.w	r2, r3, #15
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_PCD_EP_ClrStall+0x86>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e00e      	b.n	8002fb2 <HAL_PCD_EP_ClrStall+0xa4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 fce2 	bl	800596c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	da0c      	bge.n	8002fe8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	3338      	adds	r3, #56	@ 0x38
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e00c      	b.n	8003002 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3304      	adds	r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	4618      	mov	r0, r3
 800300a:	f002 fb01 	bl	8005610 <USB_EPStopXfer>
 800300e:	4603      	mov	r3, r0
 8003010:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003012:	7afb      	ldrb	r3, [r7, #11]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af02      	add	r7, sp, #8
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	3338      	adds	r3, #56	@ 0x38
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	3304      	adds	r3, #4
 8003042:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	429a      	cmp	r2, r3
 800304e:	d901      	bls.n	8003054 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e06c      	b.n	800312e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	429a      	cmp	r2, r3
 8003068:	d902      	bls.n	8003070 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3303      	adds	r3, #3
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003078:	e02b      	b.n	80030d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	429a      	cmp	r2, r3
 800308e:	d902      	bls.n	8003096 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3303      	adds	r3, #3
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	4603      	mov	r3, r0
 80030b4:	6978      	ldr	r0, [r7, #20]
 80030b6:	f002 fb55 	bl	8005764 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	441a      	add	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1a      	ldr	r2, [r3, #32]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	441a      	add	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d809      	bhi.n	80030fc <PCD_WriteEmptyTxFifo+0xe0>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d203      	bcs.n	80030fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1be      	bne.n	800307a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	429a      	cmp	r2, r3
 8003106:	d811      	bhi.n	800312c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	2201      	movs	r2, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800311c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	43db      	mvns	r3, r3
 8003122:	6939      	ldr	r1, [r7, #16]
 8003124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003128:	4013      	ands	r3, r2
 800312a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	333c      	adds	r3, #60	@ 0x3c
 8003150:	3304      	adds	r3, #4
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d17b      	bne.n	8003266 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	4a61      	ldr	r2, [pc, #388]	@ (8003300 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	f240 80b9 	bls.w	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80b3 	beq.w	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800319a:	461a      	mov	r2, r3
 800319c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a0:	6093      	str	r3, [r2, #8]
 80031a2:	e0a7      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ba:	461a      	mov	r2, r3
 80031bc:	2320      	movs	r3, #32
 80031be:	6093      	str	r3, [r2, #8]
 80031c0:	e098      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 8093 	bne.w	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003300 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d90f      	bls.n	80031f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ec:	461a      	mov	r2, r3
 80031ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f2:	6093      	str	r3, [r2, #8]
 80031f4:	e07e      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	3304      	adds	r3, #4
 800320a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	0159      	lsls	r1, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	440b      	add	r3, r1
 8003218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	1ad2      	subs	r2, r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d114      	bne.n	8003258 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003240:	461a      	mov	r2, r3
 8003242:	2101      	movs	r1, #1
 8003244:	f002 fd26 	bl	8005c94 <USB_EP0_OutStart>
 8003248:	e006      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	441a      	add	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f005 f868 	bl	8008334 <HAL_PCD_DataOutStageCallback>
 8003264:	e046      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	4a26      	ldr	r2, [pc, #152]	@ (8003304 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d124      	bne.n	80032b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003284:	461a      	mov	r2, r3
 8003286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328a:	6093      	str	r3, [r2, #8]
 800328c:	e032      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a4:	461a      	mov	r2, r3
 80032a6:	2320      	movs	r3, #32
 80032a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f005 f83f 	bl	8008334 <HAL_PCD_DataOutStageCallback>
 80032b6:	e01d      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d114      	bne.n	80032e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d108      	bne.n	80032e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80032e0:	461a      	mov	r2, r3
 80032e2:	2100      	movs	r1, #0
 80032e4:	f002 fcd6 	bl	8005c94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f005 f820 	bl	8008334 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	4f54300a 	.word	0x4f54300a
 8003304:	4f54310a 	.word	0x4f54310a

08003308 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	333c      	adds	r3, #60	@ 0x3c
 8003320:	3304      	adds	r3, #4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a15      	ldr	r2, [pc, #84]	@ (8003390 <PCD_EP_OutSetupPacket_int+0x88>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d90e      	bls.n	800335c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800335a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f004 ffd7 	bl	8008310 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <PCD_EP_OutSetupPacket_int+0x88>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d90c      	bls.n	8003384 <PCD_EP_OutSetupPacket_int+0x7c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d108      	bne.n	8003384 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800337c:	461a      	mov	r2, r3
 800337e:	2101      	movs	r1, #1
 8003380:	f002 fc88 	bl	8005c94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	4f54300a 	.word	0x4f54300a

08003394 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	70fb      	strb	r3, [r7, #3]
 80033a0:	4613      	mov	r3, r2
 80033a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033b2:	883b      	ldrh	r3, [r7, #0]
 80033b4:	0419      	lsls	r1, r3, #16
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	430a      	orrs	r2, r1
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28
 80033c0:	e028      	b.n	8003414 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4413      	add	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e00d      	b.n	80033f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	3340      	adds	r3, #64	@ 0x40
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4413      	add	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	3301      	adds	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3ec      	bcc.n	80033d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033fc:	883b      	ldrh	r3, [r7, #0]
 80033fe:	0418      	lsls	r0, r3, #16
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	3b01      	subs	r3, #1
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	4302      	orrs	r2, r0
 800340c:	3340      	adds	r3, #64	@ 0x40
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	460b      	mov	r3, r1
 800342c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003472:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_PCDEx_ActivateLPM+0x44>)
 8003474:	4313      	orrs	r3, r2
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	10000003 	.word	0x10000003

0800348c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	4b23      	ldr	r3, [pc, #140]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	4a22      	ldr	r2, [pc, #136]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ba:	f7fd fbf5 	bl	8000ca8 <HAL_GetTick>
 80034be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034c0:	e009      	b.n	80034d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034c2:	f7fd fbf1 	bl	8000ca8 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034d0:	d901      	bls.n	80034d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e022      	b.n	800351c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e2:	d1ee      	bne.n	80034c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034e4:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f0:	f7fd fbda 	bl	8000ca8 <HAL_GetTick>
 80034f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034f6:	e009      	b.n	800350c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034f8:	f7fd fbd6 	bl	8000ca8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003506:	d901      	bls.n	800350c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e007      	b.n	800351c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003518:	d1ee      	bne.n	80034f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000

0800352c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e291      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003550:	4b96      	ldr	r3, [pc, #600]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00c      	beq.n	8003576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355c:	4b93      	ldr	r3, [pc, #588]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d112      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
 8003568:	4b90      	ldr	r3, [pc, #576]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b8d      	ldr	r3, [pc, #564]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d06c      	beq.n	800365c <HAL_RCC_OscConfig+0x130>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d168      	bne.n	800365c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e26b      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x7a>
 8003598:	4b84      	ldr	r3, [pc, #528]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a83      	ldr	r2, [pc, #524]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x9c>
 80035ae:	4b7f      	ldr	r3, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b7c      	ldr	r3, [pc, #496]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7b      	ldr	r2, [pc, #492]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xc0>
 80035d2:	4b76      	ldr	r3, [pc, #472]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a75      	ldr	r2, [pc, #468]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b73      	ldr	r3, [pc, #460]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a72      	ldr	r2, [pc, #456]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035ec:	4b6f      	ldr	r3, [pc, #444]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b6c      	ldr	r3, [pc, #432]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6b      	ldr	r2, [pc, #428]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd fb4c 	bl	8000ca8 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd fb48 	bl	8000ca8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e21f      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fb38 	bl	8000ca8 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fb34 	bl	8000ca8 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e20b      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b57      	ldr	r3, [pc, #348]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x110>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d069      	beq.n	800373e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366a:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x190>
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b47      	ldr	r3, [pc, #284]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1df      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	493d      	ldr	r1, [pc, #244]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e040      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d023      	beq.n	800370c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b39      	ldr	r3, [pc, #228]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a38      	ldr	r2, [pc, #224]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd faea 	bl	8000ca8 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d8:	f7fd fae6 	bl	8000ca8 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1bd      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	4b30      	ldr	r3, [pc, #192]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4929      	ldr	r1, [pc, #164]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
 800370a:	e018      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370c:	4b27      	ldr	r3, [pc, #156]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a26      	ldr	r2, [pc, #152]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd fac6 	bl	8000ca8 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003720:	f7fd fac2 	bl	8000ca8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e199      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d038      	beq.n	80037bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d019      	beq.n	8003786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003756:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fd faa3 	bl	8000ca8 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003766:	f7fd fa9f 	bl	8000ca8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e176      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x23a>
 8003784:	e01a      	b.n	80037bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378a:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fd fa89 	bl	8000ca8 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379a:	f7fd fa85 	bl	8000ca8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d903      	bls.n	80037b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e15c      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
 80037ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	4b91      	ldr	r3, [pc, #580]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a4 	beq.w	8003912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ca:	4b8b      	ldr	r3, [pc, #556]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	4b88      	ldr	r3, [pc, #544]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a87      	ldr	r2, [pc, #540]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b85      	ldr	r3, [pc, #532]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f2:	4b82      	ldr	r3, [pc, #520]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037fe:	4b7f      	ldr	r3, [pc, #508]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7e      	ldr	r2, [pc, #504]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fd fa4d 	bl	8000ca8 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fd fa49 	bl	8000ca8 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b64      	cmp	r3, #100	@ 0x64
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e120      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	4b75      	ldr	r3, [pc, #468]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x31a>
 8003838:	4b6f      	ldr	r3, [pc, #444]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	4a6e      	ldr	r2, [pc, #440]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	@ 0x70
 8003844:	e02d      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x33c>
 800384e:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003852:	4a69      	ldr	r2, [pc, #420]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6713      	str	r3, [r2, #112]	@ 0x70
 800385a:	4b67      	ldr	r3, [pc, #412]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	4a66      	ldr	r2, [pc, #408]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6713      	str	r3, [r2, #112]	@ 0x70
 8003866:	e01c      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d10c      	bne.n	800388a <HAL_RCC_OscConfig+0x35e>
 8003870:	4b61      	ldr	r3, [pc, #388]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	4a60      	ldr	r2, [pc, #384]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6713      	str	r3, [r2, #112]	@ 0x70
 800387c:	4b5e      	ldr	r3, [pc, #376]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a5d      	ldr	r2, [pc, #372]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	e00b      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 800388a:	4b5b      	ldr	r3, [pc, #364]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	4a5a      	ldr	r2, [pc, #360]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
 8003896:	4b58      	ldr	r3, [pc, #352]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	4a57      	ldr	r2, [pc, #348]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d015      	beq.n	80038d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fd f9fd 	bl	8000ca8 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fd f9f9 	bl	8000ca8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0ce      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ee      	beq.n	80038b2 <HAL_RCC_OscConfig+0x386>
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd f9e7 	bl	8000ca8 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fd f9e3 	bl	8000ca8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0b8      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f4:	4b40      	ldr	r3, [pc, #256]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ee      	bne.n	80038de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003906:	4b3c      	ldr	r3, [pc, #240]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	4a3b      	ldr	r2, [pc, #236]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800390c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80a4 	beq.w	8003a64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800391c:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d06b      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d149      	bne.n	80039c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a30      	ldr	r2, [pc, #192]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd f9b4 	bl	8000ca8 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd f9b0 	bl	8000ca8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e087      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	4313      	orrs	r3, r2
 8003988:	4a1b      	ldr	r2, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800398a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800398e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b19      	ldr	r3, [pc, #100]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd f984 	bl	8000ca8 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fd f980 	bl	8000ca8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e057      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x478>
 80039c2:	e04f      	b.n	8003a64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd f96a 	bl	8000ca8 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fd f966 	bl	8000ca8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e03d      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	4b03      	ldr	r3, [pc, #12]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4ac>
 80039f6:	e035      	b.n	8003a64 <HAL_RCC_OscConfig+0x538>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <HAL_RCC_OscConfig+0x544>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d028      	beq.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d121      	bne.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d11a      	bne.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d111      	bne.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0d0      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d910      	bls.n	8003abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b67      	ldr	r3, [pc, #412]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 020f 	bic.w	r2, r3, #15
 8003aa2:	4965      	ldr	r1, [pc, #404]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b63      	ldr	r3, [pc, #396]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0b8      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad4:	4b59      	ldr	r3, [pc, #356]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a58      	ldr	r2, [pc, #352]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aec:	4b53      	ldr	r3, [pc, #332]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a52      	ldr	r2, [pc, #328]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af8:	4b50      	ldr	r3, [pc, #320]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	494d      	ldr	r1, [pc, #308]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d040      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1e:	4b47      	ldr	r3, [pc, #284]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d115      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e07f      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	4b41      	ldr	r3, [pc, #260]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e073      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	4b3d      	ldr	r3, [pc, #244]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e06b      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b39      	ldr	r3, [pc, #228]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4936      	ldr	r1, [pc, #216]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b68:	f7fd f89e 	bl	8000ca8 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fd f89a 	bl	8000ca8 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e053      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b2d      	ldr	r3, [pc, #180]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b98:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d210      	bcs.n	8003bc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b24      	ldr	r3, [pc, #144]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 020f 	bic.w	r2, r3, #15
 8003bae:	4922      	ldr	r1, [pc, #136]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e032      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd4:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4916      	ldr	r1, [pc, #88]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bf2:	4b12      	ldr	r3, [pc, #72]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	490e      	ldr	r1, [pc, #56]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c06:	f000 f821 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	490a      	ldr	r1, [pc, #40]	@ (8003c40 <HAL_RCC_ClockConfig+0x1cc>)
 8003c18:	5ccb      	ldrb	r3, [r1, r3]
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	4a09      	ldr	r2, [pc, #36]	@ (8003c44 <HAL_RCC_ClockConfig+0x1d0>)
 8003c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c22:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <HAL_RCC_ClockConfig+0x1d4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fc fffa 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023c00 	.word	0x40023c00
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	08008c0c 	.word	0x08008c0c
 8003c44:	20000000 	.word	0x20000000
 8003c48:	20000004 	.word	0x20000004

08003c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b090      	sub	sp, #64	@ 0x40
 8003c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c58:	2300      	movs	r3, #0
 8003c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c64:	4b59      	ldr	r3, [pc, #356]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d00d      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x40>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	f200 80a1 	bhi.w	8003db8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x34>
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c7e:	e09b      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b53      	ldr	r3, [pc, #332]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c84:	e09b      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c86:	4b53      	ldr	r3, [pc, #332]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c8a:	e098      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c96:	4b4d      	ldr	r3, [pc, #308]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d028      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	2200      	movs	r2, #0
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4b47      	ldr	r3, [pc, #284]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb8:	fb03 f201 	mul.w	r2, r3, r1
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	fb00 f303 	mul.w	r3, r0, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	4a43      	ldr	r2, [pc, #268]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc6:	fba0 1202 	umull	r1, r2, r0, r2
 8003cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ccc:	460a      	mov	r2, r1
 8003cce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd2:	4413      	add	r3, r2
 8003cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd8:	2200      	movs	r2, #0
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	61fa      	str	r2, [r7, #28]
 8003cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ce6:	f7fc fa9b 	bl	8000220 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4613      	mov	r3, r2
 8003cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cf2:	e053      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf4:	4b35      	ldr	r3, [pc, #212]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	617a      	str	r2, [r7, #20]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d06:	f04f 0b00 	mov.w	fp, #0
 8003d0a:	4652      	mov	r2, sl
 8003d0c:	465b      	mov	r3, fp
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	0159      	lsls	r1, r3, #5
 8003d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d1c:	0150      	lsls	r0, r2, #5
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	ebb2 080a 	subs.w	r8, r2, sl
 8003d26:	eb63 090b 	sbc.w	r9, r3, fp
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d42:	eb63 0509 	sbc.w	r5, r3, r9
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	00eb      	lsls	r3, r5, #3
 8003d50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d54:	00e2      	lsls	r2, r4, #3
 8003d56:	4614      	mov	r4, r2
 8003d58:	461d      	mov	r5, r3
 8003d5a:	eb14 030a 	adds.w	r3, r4, sl
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	eb45 030b 	adc.w	r3, r5, fp
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d72:	4629      	mov	r1, r5
 8003d74:	028b      	lsls	r3, r1, #10
 8003d76:	4621      	mov	r1, r4
 8003d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	028a      	lsls	r2, r1, #10
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d86:	2200      	movs	r2, #0
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	60fa      	str	r2, [r7, #12]
 8003d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d90:	f7fc fa46 	bl	8000220 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	3301      	adds	r3, #1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3740      	adds	r7, #64	@ 0x40
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	017d7840 	.word	0x017d7840

08003dd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <HAL_RCC_GetHCLKFreq+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000000 	.word	0x20000000

08003df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d012      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e14:	4b65      	ldr	r3, [pc, #404]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a64      	ldr	r2, [pc, #400]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e1a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e1e:	6093      	str	r3, [r2, #8]
 8003e20:	4b62      	ldr	r3, [pc, #392]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	4960      	ldr	r1, [pc, #384]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e46:	4b59      	ldr	r3, [pc, #356]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e54:	4955      	ldr	r1, [pc, #340]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e64:	d101      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d017      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e82:	4b4a      	ldr	r3, [pc, #296]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	4946      	ldr	r1, [pc, #280]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 808b 	beq.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	4a39      	ldr	r2, [pc, #228]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ecc:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a34      	ldr	r2, [pc, #208]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fc fee0 	bl	8000ca8 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eec:	f7fc fedc 	bl	8000ca8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	@ 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e2bc      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003efe:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d035      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d02e      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f28:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f32:	4b1e      	ldr	r3, [pc, #120]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	4a1d      	ldr	r2, [pc, #116]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f3c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	4a1a      	ldr	r2, [pc, #104]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f4a:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f50:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d114      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fc fea4 	bl	8000ca8 <HAL_GetTick>
 8003f60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fc fea0 	bl	8000ca8 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e27e      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f92:	d111      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003fa0:	4b04      	ldr	r3, [pc, #16]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	4901      	ldr	r1, [pc, #4]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	0ffffcff 	.word	0x0ffffcff
 8003fb8:	4ba4      	ldr	r3, [pc, #656]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4aa3      	ldr	r2, [pc, #652]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fbe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003fc2:	6093      	str	r3, [r2, #8]
 8003fc4:	4ba1      	ldr	r3, [pc, #644]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd0:	499e      	ldr	r1, [pc, #632]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d010      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fe2:	4b9a      	ldr	r3, [pc, #616]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe8:	4a98      	ldr	r2, [pc, #608]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ff2:	4b96      	ldr	r3, [pc, #600]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ff4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	4993      	ldr	r1, [pc, #588]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004010:	4b8e      	ldr	r3, [pc, #568]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401e:	498b      	ldr	r1, [pc, #556]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004032:	4b86      	ldr	r3, [pc, #536]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	4982      	ldr	r1, [pc, #520]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004054:	4b7d      	ldr	r3, [pc, #500]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004062:	497a      	ldr	r1, [pc, #488]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004076:	4b75      	ldr	r3, [pc, #468]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407c:	f023 0203 	bic.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004084:	4971      	ldr	r1, [pc, #452]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004098:	4b6c      	ldr	r3, [pc, #432]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	f023 020c 	bic.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	4969      	ldr	r1, [pc, #420]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ba:	4b64      	ldr	r3, [pc, #400]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	4960      	ldr	r1, [pc, #384]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040dc:	4b5b      	ldr	r3, [pc, #364]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ea:	4958      	ldr	r1, [pc, #352]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040fe:	4b53      	ldr	r3, [pc, #332]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410c:	494f      	ldr	r1, [pc, #316]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004120:	4b4a      	ldr	r3, [pc, #296]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412e:	4947      	ldr	r1, [pc, #284]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004142:	4b42      	ldr	r3, [pc, #264]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004150:	493e      	ldr	r1, [pc, #248]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004164:	4b39      	ldr	r3, [pc, #228]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	4936      	ldr	r1, [pc, #216]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d011      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004186:	4b31      	ldr	r3, [pc, #196]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004194:	492d      	ldr	r1, [pc, #180]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b6:	4b25      	ldr	r3, [pc, #148]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c4:	4921      	ldr	r1, [pc, #132]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041d8:	4b1c      	ldr	r3, [pc, #112]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041e6:	4919      	ldr	r1, [pc, #100]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041fa:	4b14      	ldr	r3, [pc, #80]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004200:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004208:	4910      	ldr	r1, [pc, #64]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d006      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 809d 	beq.w	800435e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004224:	4b09      	ldr	r3, [pc, #36]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a08      	ldr	r2, [pc, #32]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800422a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800422e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fc fd3a 	bl	8000ca8 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004236:	e00b      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004238:	f7fc fd36 	bl	8000ca8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	@ 0x64
 8004244:	d904      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e116      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004250:	4b8b      	ldr	r3, [pc, #556]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1ed      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d017      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d113      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004270:	4b83      	ldr	r3, [pc, #524]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004276:	0e1b      	lsrs	r3, r3, #24
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	019a      	lsls	r2, r3, #6
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	061b      	lsls	r3, r3, #24
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	071b      	lsls	r3, r3, #28
 8004290:	497b      	ldr	r1, [pc, #492]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d024      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c2:	d11f      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c4:	4b6e      	ldr	r3, [pc, #440]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ca:	0f1b      	lsrs	r3, r3, #28
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	019a      	lsls	r2, r3, #6
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	431a      	orrs	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	071b      	lsls	r3, r3, #28
 80042e4:	4966      	ldr	r1, [pc, #408]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042ec:	4b64      	ldr	r3, [pc, #400]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042f2:	f023 021f 	bic.w	r2, r3, #31
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	4960      	ldr	r1, [pc, #384]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00d      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	019a      	lsls	r2, r3, #6
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	071b      	lsls	r3, r3, #28
 8004324:	4956      	ldr	r1, [pc, #344]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800432c:	4b54      	ldr	r3, [pc, #336]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a53      	ldr	r2, [pc, #332]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004332:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fc fcb6 	bl	8000ca8 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004340:	f7fc fcb2 	bl	8000ca8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	@ 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e092      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004352:	4b4b      	ldr	r3, [pc, #300]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b01      	cmp	r3, #1
 8004362:	f040 8088 	bne.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004366:	4b46      	ldr	r3, [pc, #280]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a45      	ldr	r2, [pc, #276]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800436c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004372:	f7fc fc99 	bl	8000ca8 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004378:	e008      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800437a:	f7fc fc95 	bl	8000ca8 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	@ 0x64
 8004386:	d901      	bls.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e075      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800438c:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004398:	d0ef      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d024      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d120      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	019a      	lsls	r2, r3, #6
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	4927      	ldr	r1, [pc, #156]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043ea:	4b25      	ldr	r3, [pc, #148]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	4920      	ldr	r1, [pc, #128]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d018      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004418:	d113      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800441a:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004420:	0e1b      	lsrs	r3, r3, #24
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	019a      	lsls	r2, r3, #6
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	431a      	orrs	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	4911      	ldr	r1, [pc, #68]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004442:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a0e      	ldr	r2, [pc, #56]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444e:	f7fc fc2b 	bl	8000ca8 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004456:	f7fc fc27 	bl	8000ca8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	@ 0x64
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e007      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004474:	d1ef      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800

08004484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004484:	b084      	sub	sp, #16
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	f107 001c 	add.w	r0, r7, #28
 8004492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004498:	2b01      	cmp	r3, #1
 800449a:	d126      	bne.n	80044ea <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	4b3f      	ldr	r3, [pc, #252]	@ (80045ac <USB_CoreInit+0x128>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f043 0210 	orr.w	r2, r3, #16
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d105      	bne.n	80044de <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 fc36 	bl	8005d50 <USB_CoreReset>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]
 80044e8:	e048      	b.n	800457c <USB_CoreInit+0xf8>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d134      	bne.n	800455a <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	4b2a      	ldr	r3, [pc, #168]	@ (80045ac <USB_CoreInit+0x128>)
 8004502:	4013      	ands	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f023 0210 	bic.w	r2, r3, #16
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
#ifdef USBPHYC
    /* Enable USB HS PHY */
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 fc43 	bl	8005db8 <USB_HS_PHYCInit>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e02f      	b.n	800459c <USB_CoreInit+0x118>
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800453c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d105      	bne.n	800454e <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 fbfe 	bl	8005d50 <USB_CoreReset>
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]
 8004558:	e010      	b.n	800457c <USB_CoreInit+0xf8>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f001 fbf2 	bl	8005d50 <USB_CoreReset>
 800456c:	4603      	mov	r3, r0
 800456e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457e:	2b01      	cmp	r3, #1
 8004580:	d10b      	bne.n	800459a <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f043 0206 	orr.w	r2, r3, #6
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f043 0220 	orr.w	r2, r3, #32
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800459a:	7bfb      	ldrb	r3, [r7, #15]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a6:	b004      	add	sp, #16
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	ffbdffbf 	.word	0xffbdffbf

080045b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	4613      	mov	r3, r2
 80045bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d165      	bne.n	8004690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4a41      	ldr	r2, [pc, #260]	@ (80046cc <USB_SetTurnaroundTime+0x11c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d906      	bls.n	80045da <USB_SetTurnaroundTime+0x2a>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4a40      	ldr	r2, [pc, #256]	@ (80046d0 <USB_SetTurnaroundTime+0x120>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d202      	bcs.n	80045da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045d4:	230f      	movs	r3, #15
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e062      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4a3c      	ldr	r2, [pc, #240]	@ (80046d0 <USB_SetTurnaroundTime+0x120>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d306      	bcc.n	80045f0 <USB_SetTurnaroundTime+0x40>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4a3b      	ldr	r2, [pc, #236]	@ (80046d4 <USB_SetTurnaroundTime+0x124>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d202      	bcs.n	80045f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045ea:	230e      	movs	r3, #14
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e057      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a38      	ldr	r2, [pc, #224]	@ (80046d4 <USB_SetTurnaroundTime+0x124>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d306      	bcc.n	8004606 <USB_SetTurnaroundTime+0x56>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a37      	ldr	r2, [pc, #220]	@ (80046d8 <USB_SetTurnaroundTime+0x128>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d202      	bcs.n	8004606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004600:	230d      	movs	r3, #13
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e04c      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a33      	ldr	r2, [pc, #204]	@ (80046d8 <USB_SetTurnaroundTime+0x128>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d306      	bcc.n	800461c <USB_SetTurnaroundTime+0x6c>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a32      	ldr	r2, [pc, #200]	@ (80046dc <USB_SetTurnaroundTime+0x12c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d802      	bhi.n	800461c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004616:	230c      	movs	r3, #12
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	e041      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a2f      	ldr	r2, [pc, #188]	@ (80046dc <USB_SetTurnaroundTime+0x12c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d906      	bls.n	8004632 <USB_SetTurnaroundTime+0x82>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4a2e      	ldr	r2, [pc, #184]	@ (80046e0 <USB_SetTurnaroundTime+0x130>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d802      	bhi.n	8004632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800462c:	230b      	movs	r3, #11
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e036      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a2a      	ldr	r2, [pc, #168]	@ (80046e0 <USB_SetTurnaroundTime+0x130>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d906      	bls.n	8004648 <USB_SetTurnaroundTime+0x98>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4a29      	ldr	r2, [pc, #164]	@ (80046e4 <USB_SetTurnaroundTime+0x134>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d802      	bhi.n	8004648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004642:	230a      	movs	r3, #10
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e02b      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a26      	ldr	r2, [pc, #152]	@ (80046e4 <USB_SetTurnaroundTime+0x134>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d906      	bls.n	800465e <USB_SetTurnaroundTime+0xae>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4a25      	ldr	r2, [pc, #148]	@ (80046e8 <USB_SetTurnaroundTime+0x138>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d202      	bcs.n	800465e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004658:	2309      	movs	r3, #9
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e020      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a21      	ldr	r2, [pc, #132]	@ (80046e8 <USB_SetTurnaroundTime+0x138>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d306      	bcc.n	8004674 <USB_SetTurnaroundTime+0xc4>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a20      	ldr	r2, [pc, #128]	@ (80046ec <USB_SetTurnaroundTime+0x13c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d802      	bhi.n	8004674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800466e:	2308      	movs	r3, #8
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e015      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a1d      	ldr	r2, [pc, #116]	@ (80046ec <USB_SetTurnaroundTime+0x13c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d906      	bls.n	800468a <USB_SetTurnaroundTime+0xda>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a1c      	ldr	r2, [pc, #112]	@ (80046f0 <USB_SetTurnaroundTime+0x140>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d202      	bcs.n	800468a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004684:	2307      	movs	r3, #7
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	e00a      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800468a:	2306      	movs	r3, #6
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e007      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004696:	2309      	movs	r3, #9
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e001      	b.n	80046a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800469c:	2309      	movs	r3, #9
 800469e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	00d8acbf 	.word	0x00d8acbf
 80046d0:	00e4e1c0 	.word	0x00e4e1c0
 80046d4:	00f42400 	.word	0x00f42400
 80046d8:	01067380 	.word	0x01067380
 80046dc:	011a499f 	.word	0x011a499f
 80046e0:	01312cff 	.word	0x01312cff
 80046e4:	014ca43f 	.word	0x014ca43f
 80046e8:	016e3600 	.word	0x016e3600
 80046ec:	01a6ab1f 	.word	0x01a6ab1f
 80046f0:	01e84800 	.word	0x01e84800

080046f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f043 0201 	orr.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d115      	bne.n	8004786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004766:	2001      	movs	r0, #1
 8004768:	f7fc faaa 	bl	8000cc0 <HAL_Delay>
      ms++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f001 fa5b 	bl	8005c2e <USB_GetMode>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d01e      	beq.n	80047bc <USB_SetCurrentMode+0x84>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b31      	cmp	r3, #49	@ 0x31
 8004782:	d9f0      	bls.n	8004766 <USB_SetCurrentMode+0x2e>
 8004784:	e01a      	b.n	80047bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d115      	bne.n	80047b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004798:	2001      	movs	r0, #1
 800479a:	f7fc fa91 	bl	8000cc0 <HAL_Delay>
      ms++;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3301      	adds	r3, #1
 80047a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f001 fa42 	bl	8005c2e <USB_GetMode>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <USB_SetCurrentMode+0x84>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b31      	cmp	r3, #49	@ 0x31
 80047b4:	d9f0      	bls.n	8004798 <USB_SetCurrentMode+0x60>
 80047b6:	e001      	b.n	80047bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e005      	b.n	80047c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b32      	cmp	r3, #50	@ 0x32
 80047c0:	d101      	bne.n	80047c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d0:	b084      	sub	sp, #16
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80047de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	e009      	b.n	8004804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3340      	adds	r3, #64	@ 0x40
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	2200      	movs	r2, #0
 80047fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3301      	adds	r3, #1
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b0e      	cmp	r3, #14
 8004808:	d9f2      	bls.n	80047f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800480a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11c      	bne.n	800484a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800481e:	f043 0302 	orr.w	r3, r3, #2
 8004822:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e005      	b.n	8004856 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800485c:	461a      	mov	r2, r3
 800485e:	2300      	movs	r3, #0
 8004860:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004868:	4619      	mov	r1, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004870:	461a      	mov	r2, r3
 8004872:	680b      	ldr	r3, [r1, #0]
 8004874:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10c      	bne.n	8004896 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004882:	2100      	movs	r1, #0
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f975 	bl	8004b74 <USB_SetDevSpeed>
 800488a:	e018      	b.n	80048be <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800488c:	2101      	movs	r1, #1
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f970 	bl	8004b74 <USB_SetDevSpeed>
 8004894:	e013      	b.n	80048be <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	2b03      	cmp	r3, #3
 800489a:	d10c      	bne.n	80048b6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048a2:	2100      	movs	r1, #0
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f965 	bl	8004b74 <USB_SetDevSpeed>
 80048aa:	e008      	b.n	80048be <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048ac:	2101      	movs	r1, #1
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f960 	bl	8004b74 <USB_SetDevSpeed>
 80048b4:	e003      	b.n	80048be <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048b6:	2103      	movs	r1, #3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f95b 	bl	8004b74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048be:	2110      	movs	r1, #16
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8f3 	bl	8004aac <USB_FlushTxFifo>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f91f 	bl	8004b14 <USB_FlushRxFifo>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e6:	461a      	mov	r2, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f2:	461a      	mov	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e043      	b.n	8004992 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800491c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004920:	d118      	bne.n	8004954 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e013      	b.n	8004966 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800494a:	461a      	mov	r2, r3
 800494c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e008      	b.n	8004966 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004960:	461a      	mov	r2, r3
 8004962:	2300      	movs	r3, #0
 8004964:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004972:	461a      	mov	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800498a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	3301      	adds	r3, #1
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	d3b7      	bcc.n	800490a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e043      	b.n	8004a28 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049b6:	d118      	bne.n	80049ea <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e013      	b.n	80049fc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e0:	461a      	mov	r2, r3
 80049e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e008      	b.n	80049fc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f6:	461a      	mov	r2, r3
 80049f8:	2300      	movs	r3, #0
 80049fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d3b7      	bcc.n	80049a0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d105      	bne.n	8004a64 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f043 0210 	orr.w	r2, r3, #16
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699a      	ldr	r2, [r3, #24]
 8004a68:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa4 <USB_DevInit+0x2d4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f043 0208 	orr.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <USB_DevInit+0x2d8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa0:	b004      	add	sp, #16
 8004aa2:	4770      	bx	lr
 8004aa4:	803c3800 	.word	0x803c3800
 8004aa8:	40000004 	.word	0x40000004

08004aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3301      	adds	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <USB_FlushTxFifo+0x64>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d901      	bls.n	8004acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e01b      	b.n	8004b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	daf2      	bge.n	8004aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	019b      	lsls	r3, r3, #6
 8004adc:	f043 0220 	orr.w	r2, r3, #32
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <USB_FlushTxFifo+0x64>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e006      	b.n	8004b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d0f0      	beq.n	8004ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	00030d40 	.word	0x00030d40

08004b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a11      	ldr	r2, [pc, #68]	@ (8004b70 <USB_FlushRxFifo+0x5c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e018      	b.n	8004b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	daf2      	bge.n	8004b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2210      	movs	r2, #16
 8004b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a08      	ldr	r2, [pc, #32]	@ (8004b70 <USB_FlushRxFifo+0x5c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e006      	b.n	8004b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d0f0      	beq.n	8004b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	00030d40 	.word	0x00030d40

08004b74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b087      	sub	sp, #28
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0306 	and.w	r3, r3, #6
 8004bbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	75fb      	strb	r3, [r7, #23]
 8004bca:	e00a      	b.n	8004be2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d002      	beq.n	8004bd8 <USB_GetDevSpeed+0x32>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b06      	cmp	r3, #6
 8004bd6:	d102      	bne.n	8004bde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	75fb      	strb	r3, [r7, #23]
 8004bdc:	e001      	b.n	8004be2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bde:	230f      	movs	r3, #15
 8004be0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d139      	bne.n	8004c80 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d153      	bne.n	8004cec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	791b      	ldrb	r3, [r3, #4]
 8004c5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	059b      	lsls	r3, r3, #22
 8004c66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	0159      	lsls	r1, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	440b      	add	r3, r1
 8004c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c76:	4619      	mov	r1, r3
 8004c78:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <USB_ActivateEndpoint+0x10c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
 8004c7e:	e035      	b.n	8004cec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d119      	bne.n	8004cec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	791b      	ldrb	r3, [r3, #4]
 8004cd2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	0159      	lsls	r1, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	440b      	add	r3, r1
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <USB_ActivateEndpoint+0x10c>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	10008000 	.word	0x10008000

08004d00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d161      	bne.n	8004de0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d32:	d11f      	bne.n	8004d74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d94:	4013      	ands	r3, r2
 8004d96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	2101      	movs	r1, #1
 8004daa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004db8:	4013      	ands	r3, r2
 8004dba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	0159      	lsls	r1, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	440b      	add	r3, r1
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4b35      	ldr	r3, [pc, #212]	@ (8004eb0 <USB_DeactivateEndpoint+0x1b0>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]
 8004dde:	e060      	b.n	8004ea2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df6:	d11f      	bne.n	8004e38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	43db      	mvns	r3, r3
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e58:	4013      	ands	r3, r2
 8004e5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	43db      	mvns	r3, r3
 8004e76:	68f9      	ldr	r1, [r7, #12]
 8004e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	0159      	lsls	r1, r3, #5
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	440b      	add	r3, r1
 8004e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <USB_DeactivateEndpoint+0x1b4>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	ec337800 	.word	0xec337800
 8004eb4:	eff37800 	.word	0xeff37800

08004eb8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	@ 0x28
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	f040 8163 	bne.w	80051a0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d132      	bne.n	8004f48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	0159      	lsls	r1, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004efc:	4619      	mov	r1, r3
 8004efe:	4ba5      	ldr	r3, [pc, #660]	@ (8005194 <USB_EPStartXfer+0x2dc>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	0159      	lsls	r1, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	440b      	add	r3, r1
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4b95      	ldr	r3, [pc, #596]	@ (8005198 <USB_EPStartXfer+0x2e0>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]
 8004f46:	e074      	b.n	8005032 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	0159      	lsls	r1, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	440b      	add	r3, r1
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f62:	4619      	mov	r1, r3
 8004f64:	4b8c      	ldr	r3, [pc, #560]	@ (8005198 <USB_EPStartXfer+0x2e0>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	0159      	lsls	r1, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	440b      	add	r3, r1
 8004f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f84:	4619      	mov	r1, r3
 8004f86:	4b83      	ldr	r3, [pc, #524]	@ (8005194 <USB_EPStartXfer+0x2dc>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f98:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6999      	ldr	r1, [r3, #24]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	440b      	add	r3, r1
 8004fa4:	1e59      	subs	r1, r3, #1
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fb0:	4b7a      	ldr	r3, [pc, #488]	@ (800519c <USB_EPStartXfer+0x2e4>)
 8004fb2:	400b      	ands	r3, r1
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	0148      	lsls	r0, r1, #5
 8004fb8:	69f9      	ldr	r1, [r7, #28]
 8004fba:	4401      	add	r1, r0
 8004fbc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fda:	69b9      	ldr	r1, [r7, #24]
 8004fdc:	0148      	lsls	r0, r1, #5
 8004fde:	69f9      	ldr	r1, [r7, #28]
 8004fe0:	4401      	add	r1, r0
 8004fe2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	791b      	ldrb	r3, [r3, #4]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d11f      	bne.n	8005032 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800500c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005010:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800502c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005030:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d14b      	bne.n	80050d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800504c:	461a      	mov	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	791b      	ldrb	r3, [r3, #4]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d128      	bne.n	80050ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d110      	bne.n	800508e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005086:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e00f      	b.n	80050ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e137      	b.n	8005340 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	791b      	ldrb	r3, [r3, #4]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d015      	beq.n	8005124 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 811f 	beq.w	8005340 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	2101      	movs	r1, #1
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	69f9      	ldr	r1, [r7, #28]
 800511a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800511e:	4313      	orrs	r3, r2
 8005120:	634b      	str	r3, [r1, #52]	@ 0x34
 8005122:	e10d      	b.n	8005340 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d110      	bne.n	8005156 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800514e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e00f      	b.n	8005176 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005174:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6919      	ldr	r1, [r3, #16]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	b298      	uxth	r0, r3
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	4603      	mov	r3, r0
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 faea 	bl	8005764 <USB_WritePacket>
 8005190:	e0d6      	b.n	8005340 <USB_EPStartXfer+0x488>
 8005192:	bf00      	nop
 8005194:	e007ffff 	.word	0xe007ffff
 8005198:	fff80000 	.word	0xfff80000
 800519c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	0159      	lsls	r1, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	440b      	add	r3, r1
 80051b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ba:	4619      	mov	r1, r3
 80051bc:	4b63      	ldr	r3, [pc, #396]	@ (800534c <USB_EPStartXfer+0x494>)
 80051be:	4013      	ands	r3, r2
 80051c0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	0159      	lsls	r1, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	440b      	add	r3, r1
 80051d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051dc:	4619      	mov	r1, r3
 80051de:	4b5c      	ldr	r3, [pc, #368]	@ (8005350 <USB_EPStartXfer+0x498>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d123      	bne.n	8005234 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005202:	69b9      	ldr	r1, [r7, #24]
 8005204:	0148      	lsls	r0, r1, #5
 8005206:	69f9      	ldr	r1, [r7, #28]
 8005208:	4401      	add	r1, r0
 800520a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800520e:	4313      	orrs	r3, r2
 8005210:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800522c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005230:	6113      	str	r3, [r2, #16]
 8005232:	e037      	b.n	80052a4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4413      	add	r3, r2
 800523e:	1e5a      	subs	r2, r3, #1
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	8afa      	ldrh	r2, [r7, #22]
 8005250:	fb03 f202 	mul.w	r2, r3, r2
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	8afb      	ldrh	r3, [r7, #22]
 8005268:	04d9      	lsls	r1, r3, #19
 800526a:	4b3a      	ldr	r3, [pc, #232]	@ (8005354 <USB_EPStartXfer+0x49c>)
 800526c:	400b      	ands	r3, r1
 800526e:	69b9      	ldr	r1, [r7, #24]
 8005270:	0148      	lsls	r0, r1, #5
 8005272:	69f9      	ldr	r1, [r7, #28]
 8005274:	4401      	add	r1, r0
 8005276:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800527a:	4313      	orrs	r3, r2
 800527c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005294:	69b9      	ldr	r1, [r7, #24]
 8005296:	0148      	lsls	r0, r1, #5
 8005298:	69f9      	ldr	r1, [r7, #28]
 800529a:	4401      	add	r1, r0
 800529c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052a0:	4313      	orrs	r3, r2
 80052a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d10d      	bne.n	80052c6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6919      	ldr	r1, [r3, #16]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c2:	460a      	mov	r2, r1
 80052c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	791b      	ldrb	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d128      	bne.n	8005320 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d110      	bne.n	8005300 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e00f      	b.n	8005320 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800531a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800531e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800533a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800533e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	fff80000 	.word	0xfff80000
 8005350:	e007ffff 	.word	0xe007ffff
 8005354:	1ff80000 	.word	0x1ff80000

08005358 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	f040 80ce 	bne.w	8005516 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d132      	bne.n	80053e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	0159      	lsls	r1, r3, #5
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	440b      	add	r3, r1
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	4619      	mov	r1, r3
 800539e:	4b9a      	ldr	r3, [pc, #616]	@ (8005608 <USB_EP0StartXfer+0x2b0>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	0159      	lsls	r1, r3, #5
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	440b      	add	r3, r1
 80053da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053de:	4619      	mov	r1, r3
 80053e0:	4b8a      	ldr	r3, [pc, #552]	@ (800560c <USB_EP0StartXfer+0x2b4>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	610b      	str	r3, [r1, #16]
 80053e6:	e04e      	b.n	8005486 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	0159      	lsls	r1, r3, #5
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	440b      	add	r3, r1
 80053fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005402:	4619      	mov	r1, r3
 8005404:	4b81      	ldr	r3, [pc, #516]	@ (800560c <USB_EP0StartXfer+0x2b4>)
 8005406:	4013      	ands	r3, r2
 8005408:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	0159      	lsls	r1, r3, #5
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	440b      	add	r3, r1
 8005420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005424:	4619      	mov	r1, r3
 8005426:	4b78      	ldr	r3, [pc, #480]	@ (8005608 <USB_EP0StartXfer+0x2b0>)
 8005428:	4013      	ands	r3, r2
 800542a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	429a      	cmp	r2, r3
 8005436:	d903      	bls.n	8005440 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800545a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800545e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005476:	6939      	ldr	r1, [r7, #16]
 8005478:	0148      	lsls	r0, r1, #5
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	4401      	add	r1, r0
 800547e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005482:	4313      	orrs	r3, r2
 8005484:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d11e      	bne.n	80054ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a0:	461a      	mov	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e097      	b.n	80055fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8083 	beq.w	80055fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005510:	4313      	orrs	r3, r2
 8005512:	634b      	str	r3, [r1, #52]	@ 0x34
 8005514:	e071      	b.n	80055fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	0159      	lsls	r1, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	440b      	add	r3, r1
 800552c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005530:	4619      	mov	r1, r3
 8005532:	4b36      	ldr	r3, [pc, #216]	@ (800560c <USB_EP0StartXfer+0x2b4>)
 8005534:	4013      	ands	r3, r2
 8005536:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	0159      	lsls	r1, r3, #5
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	440b      	add	r3, r1
 800554e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005552:	4619      	mov	r1, r3
 8005554:	4b2c      	ldr	r3, [pc, #176]	@ (8005608 <USB_EP0StartXfer+0x2b0>)
 8005556:	4013      	ands	r3, r2
 8005558:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800558c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005590:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a8:	6939      	ldr	r1, [r7, #16]
 80055aa:	0148      	lsls	r0, r1, #5
 80055ac:	6979      	ldr	r1, [r7, #20]
 80055ae:	4401      	add	r1, r0
 80055b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10d      	bne.n	80055da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6919      	ldr	r1, [r3, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d6:	460a      	mov	r2, r1
 80055d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	e007ffff 	.word	0xe007ffff
 800560c:	fff80000 	.word	0xfff80000

08005610 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d14a      	bne.n	80056c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005646:	f040 8086 	bne.w	8005756 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005668:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800566c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	7812      	ldrb	r2, [r2, #0]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800568c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005690:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800569e:	4293      	cmp	r3, r2
 80056a0:	d902      	bls.n	80056a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
          break;
 80056a6:	e056      	b.n	8005756 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056c0:	d0e7      	beq.n	8005692 <USB_EPStopXfer+0x82>
 80056c2:	e048      	b.n	8005756 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056dc:	d13b      	bne.n	8005756 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005700:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005720:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005724:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005732:	4293      	cmp	r3, r2
 8005734:	d902      	bls.n	800573c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	75fb      	strb	r3, [r7, #23]
          break;
 800573a:	e00c      	b.n	8005756 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005754:	d0e7      	beq.n	8005726 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
}
 8005758:	4618      	mov	r0, r3
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	@ 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	4611      	mov	r1, r2
 8005770:	461a      	mov	r2, r3
 8005772:	460b      	mov	r3, r1
 8005774:	71fb      	strb	r3, [r7, #7]
 8005776:	4613      	mov	r3, r2
 8005778:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005782:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d123      	bne.n	80057d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800578a:	88bb      	ldrh	r3, [r7, #4]
 800578c:	3303      	adds	r3, #3
 800578e:	089b      	lsrs	r3, r3, #2
 8005790:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	e018      	b.n	80057ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	031a      	lsls	r2, r3, #12
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057a4:	461a      	mov	r2, r3
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	3301      	adds	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3301      	adds	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3301      	adds	r3, #1
 80057c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	3301      	adds	r3, #1
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d3e2      	bcc.n	8005798 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3724      	adds	r7, #36	@ 0x24
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b08b      	sub	sp, #44	@ 0x2c
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	089b      	lsrs	r3, r3, #2
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	e014      	b.n	8005836 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	601a      	str	r2, [r3, #0]
    pDest++;
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	3301      	adds	r3, #1
 800581c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	3301      	adds	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	3301      	adds	r3, #1
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	3301      	adds	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	3301      	adds	r3, #1
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	6a3a      	ldr	r2, [r7, #32]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3e6      	bcc.n	800580c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800583e:	8bfb      	ldrh	r3, [r7, #30]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01e      	beq.n	8005882 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800584e:	461a      	mov	r2, r3
 8005850:	f107 0310 	add.w	r3, r7, #16
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
 8005864:	b2da      	uxtb	r2, r3
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	701a      	strb	r2, [r3, #0]
      i++;
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	3301      	adds	r3, #1
 800586e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	3301      	adds	r3, #1
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005876:	8bfb      	ldrh	r3, [r7, #30]
 8005878:	3b01      	subs	r3, #1
 800587a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800587c:	8bfb      	ldrh	r3, [r7, #30]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1ea      	bne.n	8005858 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005884:	4618      	mov	r0, r3
 8005886:	372c      	adds	r7, #44	@ 0x2c
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d12c      	bne.n	8005906 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	db12      	blt.n	80058e4 <USB_EPSetStall+0x54>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00f      	beq.n	80058e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e02b      	b.n	800595e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	db12      	blt.n	800593e <USB_EPSetStall+0xae>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00f      	beq.n	800593e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005938:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800593c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005958:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800595c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d128      	bne.n	80059da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	791b      	ldrb	r3, [r3, #4]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d003      	beq.n	80059b8 <USB_EPClearStall+0x4c>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	791b      	ldrb	r3, [r3, #4]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d138      	bne.n	8005a2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	e027      	b.n	8005a2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	791b      	ldrb	r3, [r3, #4]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d003      	beq.n	8005a0a <USB_EPClearStall+0x9e>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	791b      	ldrb	r3, [r3, #4]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d10f      	bne.n	8005a2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a56:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005a6c:	68f9      	ldr	r1, [r7, #12]
 8005a6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ab2:	f023 0302 	bic.w	r3, r3, #2
 8005ab6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ae0:	f023 0303 	bic.w	r3, r3, #3
 8005ae4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005af4:	f043 0302 	orr.w	r3, r3, #2
 8005af8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b20:	68fb      	ldr	r3, [r7, #12]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	0c1b      	lsrs	r3, r3, #16
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	4013      	ands	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	b29b      	uxth	r3, r3
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b087      	sub	sp, #28
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005c02:	01db      	lsls	r3, r3, #7
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c20:	68bb      	ldr	r3, [r7, #8]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
	...

08005c4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c66:	4619      	mov	r1, r3
 8005c68:	4b09      	ldr	r3, [pc, #36]	@ (8005c90 <USB_ActivateSetup+0x44>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	fffff800 	.word	0xfffff800

08005c94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	333c      	adds	r3, #60	@ 0x3c
 8005caa:	3304      	adds	r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4a26      	ldr	r2, [pc, #152]	@ (8005d4c <USB_EP0_OutStart+0xb8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d90a      	bls.n	8005cce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cc8:	d101      	bne.n	8005cce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e037      	b.n	8005d3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cfc:	f043 0318 	orr.w	r3, r3, #24
 8005d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d10:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005d14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d16:	7afb      	ldrb	r3, [r7, #11]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10f      	bne.n	8005d3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d36:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	4f54300a 	.word	0x4f54300a

08005d50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4a13      	ldr	r2, [pc, #76]	@ (8005db4 <USB_CoreReset+0x64>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e01b      	b.n	8005da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	daf2      	bge.n	8005d5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f043 0201 	orr.w	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4a09      	ldr	r2, [pc, #36]	@ (8005db4 <USB_CoreReset+0x64>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d0f0      	beq.n	8005d86 <USB_CoreReset+0x36>

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	00030d40 	.word	0x00030d40

08005db8 <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  __IO uint32_t count = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 8005dc4:	4b16      	ldr	r3, [pc, #88]	@ (8005e20 <USB_HS_PHYCInit+0x68>)
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	@ (8005e20 <USB_HS_PHYCInit+0x68>)
 8005dca:	f043 0304 	orr.w	r3, r3, #4
 8005dce:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8005dd0:	e008      	b.n	8005de4 <USB_HS_PHYCInit+0x2c>
  {
    count++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4a12      	ldr	r2, [pc, #72]	@ (8005e24 <USB_HS_PHYCInit+0x6c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <USB_HS_PHYCInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e019      	b.n	8005e18 <USB_HS_PHYCInit+0x60>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8005de4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e20 <USB_HS_PHYCInit+0x68>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0f0      	beq.n	8005dd2 <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
  }
  else if (HSE_VALUE == 25000000U) /* HSE = 25MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x5U << 1);
 8005df0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <USB_HS_PHYCInit+0x68>)
 8005df2:	220a      	movs	r2, #10
 8005df4:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 8005df6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e20 <USB_HS_PHYCInit+0x68>)
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	4909      	ldr	r1, [pc, #36]	@ (8005e20 <USB_HS_PHYCInit+0x68>)
 8005dfc:	f640 7313 	movw	r3, #3859	@ 0xf13
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 8005e04:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <USB_HS_PHYCInit+0x68>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a05      	ldr	r2, [pc, #20]	@ (8005e20 <USB_HS_PHYCInit+0x68>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6013      	str	r3, [r2, #0]


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 8005e10:	2002      	movs	r0, #2
 8005e12:	f7fa ff55 	bl	8000cc0 <HAL_Delay>

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40017c00 	.word	0x40017c00
 8005e24:	00030d40 	.word	0x00030d40

08005e28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e34:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e38:	f002 fd6a 	bl	8008910 <malloc>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	32b0      	adds	r2, #176	@ 0xb0
 8005e50:	2100      	movs	r1, #0
 8005e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e56:	2302      	movs	r3, #2
 8005e58:	e0d4      	b.n	8006004 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e5a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e5e:	2100      	movs	r1, #0
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f002 fe13 	bl	8008a8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	32b0      	adds	r2, #176	@ 0xb0
 8005e70:	68f9      	ldr	r1, [r7, #12]
 8005e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	32b0      	adds	r2, #176	@ 0xb0
 8005e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	7c1b      	ldrb	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d138      	bne.n	8005f04 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e92:	4b5e      	ldr	r3, [pc, #376]	@ (800600c <USBD_CDC_Init+0x1e4>)
 8005e94:	7819      	ldrb	r1, [r3, #0]
 8005e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f002 fb94 	bl	80085ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800600c <USBD_CDC_Init+0x1e4>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3324      	adds	r3, #36	@ 0x24
 8005eb8:	2201      	movs	r2, #1
 8005eba:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ebc:	4b54      	ldr	r3, [pc, #336]	@ (8006010 <USBD_CDC_Init+0x1e8>)
 8005ebe:	7819      	ldrb	r1, [r3, #0]
 8005ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f002 fb7f 	bl	80085ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ecc:	4b50      	ldr	r3, [pc, #320]	@ (8006010 <USBD_CDC_Init+0x1e8>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f003 020f 	and.w	r2, r3, #15
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8006014 <USBD_CDC_Init+0x1ec>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	3326      	adds	r3, #38	@ 0x26
 8005efe:	2210      	movs	r2, #16
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e035      	b.n	8005f70 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f04:	4b41      	ldr	r3, [pc, #260]	@ (800600c <USBD_CDC_Init+0x1e4>)
 8005f06:	7819      	ldrb	r1, [r3, #0]
 8005f08:	2340      	movs	r3, #64	@ 0x40
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f002 fb5c 	bl	80085ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f12:	4b3e      	ldr	r3, [pc, #248]	@ (800600c <USBD_CDC_Init+0x1e4>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	f003 020f 	and.w	r2, r3, #15
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	3324      	adds	r3, #36	@ 0x24
 8005f28:	2201      	movs	r2, #1
 8005f2a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f2c:	4b38      	ldr	r3, [pc, #224]	@ (8006010 <USBD_CDC_Init+0x1e8>)
 8005f2e:	7819      	ldrb	r1, [r3, #0]
 8005f30:	2340      	movs	r3, #64	@ 0x40
 8005f32:	2202      	movs	r2, #2
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f002 fb48 	bl	80085ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f3a:	4b35      	ldr	r3, [pc, #212]	@ (8006010 <USBD_CDC_Init+0x1e8>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f003 020f 	and.w	r2, r3, #15
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f52:	2201      	movs	r2, #1
 8005f54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f56:	4b2f      	ldr	r3, [pc, #188]	@ (8006014 <USBD_CDC_Init+0x1ec>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	f003 020f 	and.w	r2, r3, #15
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3326      	adds	r3, #38	@ 0x26
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f70:	4b28      	ldr	r3, [pc, #160]	@ (8006014 <USBD_CDC_Init+0x1ec>)
 8005f72:	7819      	ldrb	r1, [r3, #0]
 8005f74:	2308      	movs	r3, #8
 8005f76:	2203      	movs	r2, #3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f002 fb26 	bl	80085ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f7e:	4b25      	ldr	r3, [pc, #148]	@ (8006014 <USBD_CDC_Init+0x1ec>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	f003 020f 	and.w	r2, r3, #15
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	3324      	adds	r3, #36	@ 0x24
 8005f94:	2201      	movs	r2, #1
 8005f96:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	33b0      	adds	r3, #176	@ 0xb0
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e018      	b.n	8006004 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	7c1b      	ldrb	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <USBD_CDC_Init+0x1e8>)
 8005fdc:	7819      	ldrb	r1, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f002 fbdd 	bl	80087a8 <USBD_LL_PrepareReceive>
 8005fee:	e008      	b.n	8006002 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <USBD_CDC_Init+0x1e8>)
 8005ff2:	7819      	ldrb	r1, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ffa:	2340      	movs	r3, #64	@ 0x40
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f002 fbd3 	bl	80087a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000093 	.word	0x20000093
 8006010:	20000094 	.word	0x20000094
 8006014:	20000095 	.word	0x20000095

08006018 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006024:	4b3a      	ldr	r3, [pc, #232]	@ (8006110 <USBD_CDC_DeInit+0xf8>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f002 faf3 	bl	8008616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006030:	4b37      	ldr	r3, [pc, #220]	@ (8006110 <USBD_CDC_DeInit+0xf8>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f003 020f 	and.w	r2, r3, #15
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	3324      	adds	r3, #36	@ 0x24
 8006046:	2200      	movs	r2, #0
 8006048:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800604a:	4b32      	ldr	r3, [pc, #200]	@ (8006114 <USBD_CDC_DeInit+0xfc>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f002 fae0 	bl	8008616 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006056:	4b2f      	ldr	r3, [pc, #188]	@ (8006114 <USBD_CDC_DeInit+0xfc>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f003 020f 	and.w	r2, r3, #15
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800606e:	2200      	movs	r2, #0
 8006070:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006072:	4b29      	ldr	r3, [pc, #164]	@ (8006118 <USBD_CDC_DeInit+0x100>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f002 facc 	bl	8008616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800607e:	4b26      	ldr	r3, [pc, #152]	@ (8006118 <USBD_CDC_DeInit+0x100>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	f003 020f 	and.w	r2, r3, #15
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	3324      	adds	r3, #36	@ 0x24
 8006094:	2200      	movs	r2, #0
 8006096:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006098:	4b1f      	ldr	r3, [pc, #124]	@ (8006118 <USBD_CDC_DeInit+0x100>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	f003 020f 	and.w	r2, r3, #15
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	3326      	adds	r3, #38	@ 0x26
 80060ae:	2200      	movs	r2, #0
 80060b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	32b0      	adds	r2, #176	@ 0xb0
 80060bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01f      	beq.n	8006104 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	33b0      	adds	r3, #176	@ 0xb0
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	32b0      	adds	r2, #176	@ 0xb0
 80060e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f002 fc1a 	bl	8008920 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	32b0      	adds	r2, #176	@ 0xb0
 80060f6:	2100      	movs	r1, #0
 80060f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000093 	.word	0x20000093
 8006114:	20000094 	.word	0x20000094
 8006118:	20000095 	.word	0x20000095

0800611c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	32b0      	adds	r2, #176	@ 0xb0
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006148:	2303      	movs	r3, #3
 800614a:	e0bf      	b.n	80062cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006154:	2b00      	cmp	r3, #0
 8006156:	d050      	beq.n	80061fa <USBD_CDC_Setup+0xde>
 8006158:	2b20      	cmp	r3, #32
 800615a:	f040 80af 	bne.w	80062bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	88db      	ldrh	r3, [r3, #6]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d03a      	beq.n	80061dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	b25b      	sxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	da1b      	bge.n	80061a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	33b0      	adds	r3, #176	@ 0xb0
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006186:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	88d2      	ldrh	r2, [r2, #6]
 800618c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	88db      	ldrh	r3, [r3, #6]
 8006192:	2b07      	cmp	r3, #7
 8006194:	bf28      	it	cs
 8006196:	2307      	movcs	r3, #7
 8006198:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	89fa      	ldrh	r2, [r7, #14]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 fdab 	bl	8007cfc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80061a6:	e090      	b.n	80062ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	785a      	ldrb	r2, [r3, #1]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	88db      	ldrh	r3, [r3, #6]
 80061b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80061b8:	d803      	bhi.n	80061c2 <USBD_CDC_Setup+0xa6>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	88db      	ldrh	r3, [r3, #6]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	e000      	b.n	80061c4 <USBD_CDC_Setup+0xa8>
 80061c2:	2240      	movs	r2, #64	@ 0x40
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80061ca:	6939      	ldr	r1, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80061d2:	461a      	mov	r2, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 fdbd 	bl	8007d54 <USBD_CtlPrepareRx>
      break;
 80061da:	e076      	b.n	80062ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	33b0      	adds	r3, #176	@ 0xb0
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	7850      	ldrb	r0, [r2, #1]
 80061f2:	2200      	movs	r2, #0
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	4798      	blx	r3
      break;
 80061f8:	e067      	b.n	80062ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	2b0b      	cmp	r3, #11
 8006200:	d851      	bhi.n	80062a6 <USBD_CDC_Setup+0x18a>
 8006202:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <USBD_CDC_Setup+0xec>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006239 	.word	0x08006239
 800620c:	080062b5 	.word	0x080062b5
 8006210:	080062a7 	.word	0x080062a7
 8006214:	080062a7 	.word	0x080062a7
 8006218:	080062a7 	.word	0x080062a7
 800621c:	080062a7 	.word	0x080062a7
 8006220:	080062a7 	.word	0x080062a7
 8006224:	080062a7 	.word	0x080062a7
 8006228:	080062a7 	.word	0x080062a7
 800622c:	080062a7 	.word	0x080062a7
 8006230:	08006263 	.word	0x08006263
 8006234:	0800628d 	.word	0x0800628d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b03      	cmp	r3, #3
 8006242:	d107      	bne.n	8006254 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006244:	f107 030a 	add.w	r3, r7, #10
 8006248:	2202      	movs	r2, #2
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fd55 	bl	8007cfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006252:	e032      	b.n	80062ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fcdf 	bl	8007c1a <USBD_CtlError>
            ret = USBD_FAIL;
 800625c:	2303      	movs	r3, #3
 800625e:	75fb      	strb	r3, [r7, #23]
          break;
 8006260:	e02b      	b.n	80062ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b03      	cmp	r3, #3
 800626c:	d107      	bne.n	800627e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800626e:	f107 030d 	add.w	r3, r7, #13
 8006272:	2201      	movs	r2, #1
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fd40 	bl	8007cfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800627c:	e01d      	b.n	80062ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 fcca 	bl	8007c1a <USBD_CtlError>
            ret = USBD_FAIL;
 8006286:	2303      	movs	r3, #3
 8006288:	75fb      	strb	r3, [r7, #23]
          break;
 800628a:	e016      	b.n	80062ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b03      	cmp	r3, #3
 8006296:	d00f      	beq.n	80062b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fcbd 	bl	8007c1a <USBD_CtlError>
            ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062a4:	e008      	b.n	80062b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 fcb6 	bl	8007c1a <USBD_CtlError>
          ret = USBD_FAIL;
 80062ae:	2303      	movs	r3, #3
 80062b0:	75fb      	strb	r3, [r7, #23]
          break;
 80062b2:	e002      	b.n	80062ba <USBD_CDC_Setup+0x19e>
          break;
 80062b4:	bf00      	nop
 80062b6:	e008      	b.n	80062ca <USBD_CDC_Setup+0x1ae>
          break;
 80062b8:	bf00      	nop
      }
      break;
 80062ba:	e006      	b.n	80062ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 fcab 	bl	8007c1a <USBD_CtlError>
      ret = USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	75fb      	strb	r3, [r7, #23]
      break;
 80062c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80062e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32b0      	adds	r2, #176	@ 0xb0
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e065      	b.n	80063ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	32b0      	adds	r2, #176	@ 0xb0
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	3318      	adds	r3, #24
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02f      	beq.n	8006388 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	3318      	adds	r3, #24
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	f003 010f 	and.w	r1, r3, #15
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	460b      	mov	r3, r1
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	440b      	add	r3, r1
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4403      	add	r3, r0
 8006350:	3348      	adds	r3, #72	@ 0x48
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	fbb2 f1f3 	udiv	r1, r2, r3
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800635e:	2b00      	cmp	r3, #0
 8006360:	d112      	bne.n	8006388 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	f003 020f 	and.w	r2, r3, #15
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	3318      	adds	r3, #24
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800637a:	78f9      	ldrb	r1, [r7, #3]
 800637c:	2300      	movs	r3, #0
 800637e:	2200      	movs	r2, #0
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f002 f9f0 	bl	8008766 <USBD_LL_Transmit>
 8006386:	e01f      	b.n	80063c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	33b0      	adds	r3, #176	@ 0xb0
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d010      	beq.n	80063c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	33b0      	adds	r3, #176	@ 0xb0
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	32b0      	adds	r2, #176	@ 0xb0
 80063e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	32b0      	adds	r2, #176	@ 0xb0
 80063f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006400:	2303      	movs	r3, #3
 8006402:	e01a      	b.n	800643a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f002 f9ee 	bl	80087ea <USBD_LL_GetRxDataSize>
 800640e:	4602      	mov	r2, r0
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	33b0      	adds	r3, #176	@ 0xb0
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006434:	4611      	mov	r1, r2
 8006436:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	32b0      	adds	r2, #176	@ 0xb0
 8006454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006458:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006460:	2303      	movs	r3, #3
 8006462:	e024      	b.n	80064ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	33b0      	adds	r3, #176	@ 0xb0
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d019      	beq.n	80064ac <USBD_CDC_EP0_RxReady+0x6a>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800647e:	2bff      	cmp	r3, #255	@ 0xff
 8006480:	d014      	beq.n	80064ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	33b0      	adds	r3, #176	@ 0xb0
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800649a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	22ff      	movs	r2, #255	@ 0xff
 80064a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064c0:	2182      	movs	r1, #130	@ 0x82
 80064c2:	4818      	ldr	r0, [pc, #96]	@ (8006524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064c4:	f000 fd49 	bl	8006f5a <USBD_GetEpDesc>
 80064c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064ca:	2101      	movs	r1, #1
 80064cc:	4815      	ldr	r0, [pc, #84]	@ (8006524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064ce:	f000 fd44 	bl	8006f5a <USBD_GetEpDesc>
 80064d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064d4:	2181      	movs	r1, #129	@ 0x81
 80064d6:	4813      	ldr	r0, [pc, #76]	@ (8006524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064d8:	f000 fd3f 	bl	8006f5a <USBD_GetEpDesc>
 80064dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2210      	movs	r2, #16
 80064e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d006      	beq.n	80064fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064f8:	711a      	strb	r2, [r3, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d006      	beq.n	8006512 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800650c:	711a      	strb	r2, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2243      	movs	r2, #67	@ 0x43
 8006516:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006518:	4b02      	ldr	r3, [pc, #8]	@ (8006524 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000050 	.word	0x20000050

08006528 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006530:	2182      	movs	r1, #130	@ 0x82
 8006532:	4818      	ldr	r0, [pc, #96]	@ (8006594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006534:	f000 fd11 	bl	8006f5a <USBD_GetEpDesc>
 8006538:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800653a:	2101      	movs	r1, #1
 800653c:	4815      	ldr	r0, [pc, #84]	@ (8006594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800653e:	f000 fd0c 	bl	8006f5a <USBD_GetEpDesc>
 8006542:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006544:	2181      	movs	r1, #129	@ 0x81
 8006546:	4813      	ldr	r0, [pc, #76]	@ (8006594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006548:	f000 fd07 	bl	8006f5a <USBD_GetEpDesc>
 800654c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2210      	movs	r2, #16
 8006558:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d006      	beq.n	800656e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2200      	movs	r2, #0
 8006564:	711a      	strb	r2, [r3, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f042 0202 	orr.w	r2, r2, #2
 800656c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	711a      	strb	r2, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f042 0202 	orr.w	r2, r2, #2
 8006580:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2243      	movs	r2, #67	@ 0x43
 8006586:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006588:	4b02      	ldr	r3, [pc, #8]	@ (8006594 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000050 	.word	0x20000050

08006598 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065a0:	2182      	movs	r1, #130	@ 0x82
 80065a2:	4818      	ldr	r0, [pc, #96]	@ (8006604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065a4:	f000 fcd9 	bl	8006f5a <USBD_GetEpDesc>
 80065a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065aa:	2101      	movs	r1, #1
 80065ac:	4815      	ldr	r0, [pc, #84]	@ (8006604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065ae:	f000 fcd4 	bl	8006f5a <USBD_GetEpDesc>
 80065b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065b4:	2181      	movs	r1, #129	@ 0x81
 80065b6:	4813      	ldr	r0, [pc, #76]	@ (8006604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065b8:	f000 fccf 	bl	8006f5a <USBD_GetEpDesc>
 80065bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2210      	movs	r2, #16
 80065c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d006      	beq.n	80065de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d8:	711a      	strb	r2, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d006      	beq.n	80065f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ec:	711a      	strb	r2, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2243      	movs	r2, #67	@ 0x43
 80065f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065f8:	4b02      	ldr	r3, [pc, #8]	@ (8006604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000050 	.word	0x20000050

08006608 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	220a      	movs	r2, #10
 8006614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006616:	4b03      	ldr	r3, [pc, #12]	@ (8006624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	2000000c 	.word	0x2000000c

08006628 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	e009      	b.n	8006650 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	33b0      	adds	r3, #176	@ 0xb0
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	32b0      	adds	r2, #176	@ 0xb0
 8006672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006676:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800667e:	2303      	movs	r3, #3
 8006680:	e008      	b.n	8006694 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	32b0      	adds	r2, #176	@ 0xb0
 80066b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e004      	b.n	80066ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
	...

080066dc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32b0      	adds	r2, #176	@ 0xb0
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e025      	b.n	800674e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11f      	bne.n	800674c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2201      	movs	r2, #1
 8006710:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006714:	4b10      	ldr	r3, [pc, #64]	@ (8006758 <USBD_CDC_TransmitPacket+0x7c>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f003 020f 	and.w	r2, r3, #15
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4403      	add	r3, r0
 800672e:	3318      	adds	r3, #24
 8006730:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006732:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <USBD_CDC_TransmitPacket+0x7c>)
 8006734:	7819      	ldrb	r1, [r3, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f002 f80f 	bl	8008766 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000093 	.word	0x20000093

0800675c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32b0      	adds	r2, #176	@ 0xb0
 800676e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006772:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	32b0      	adds	r2, #176	@ 0xb0
 800677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006786:	2303      	movs	r3, #3
 8006788:	e018      	b.n	80067bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7c1b      	ldrb	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006792:	4b0c      	ldr	r3, [pc, #48]	@ (80067c4 <USBD_CDC_ReceivePacket+0x68>)
 8006794:	7819      	ldrb	r1, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800679c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f002 f801 	bl	80087a8 <USBD_LL_PrepareReceive>
 80067a6:	e008      	b.n	80067ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a8:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <USBD_CDC_ReceivePacket+0x68>)
 80067aa:	7819      	ldrb	r1, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067b2:	2340      	movs	r3, #64	@ 0x40
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fff7 	bl	80087a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000094 	.word	0x20000094

080067c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067dc:	2303      	movs	r3, #3
 80067de:	e01f      	b.n	8006820 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	79fa      	ldrb	r2, [r7, #7]
 8006812:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f001 fe6d 	bl	80084f4 <USBD_LL_Init>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800683c:	2303      	movs	r3, #3
 800683e:	e025      	b.n	800688c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32ae      	adds	r2, #174	@ 0xae
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00f      	beq.n	800687c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	32ae      	adds	r2, #174	@ 0xae
 8006866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	f107 020e 	add.w	r2, r7, #14
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
 8006874:	4602      	mov	r2, r0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 fe79 	bl	8008594 <USBD_LL_Start>
 80068a2:	4603      	mov	r3, r0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	4611      	mov	r1, r2
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
 80068ec:	4603      	mov	r3, r0
 80068ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	78fa      	ldrb	r2, [r7, #3]
 8006914:	4611      	mov	r1, r2
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f001 f930 	bl	8007ba6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	2b02      	cmp	r3, #2
 8006968:	d01a      	beq.n	80069a0 <USBD_LL_SetupStage+0x72>
 800696a:	2b02      	cmp	r3, #2
 800696c:	d822      	bhi.n	80069b4 <USBD_LL_SetupStage+0x86>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <USBD_LL_SetupStage+0x4a>
 8006972:	2b01      	cmp	r3, #1
 8006974:	d00a      	beq.n	800698c <USBD_LL_SetupStage+0x5e>
 8006976:	e01d      	b.n	80069b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fb5d 	bl	8007040 <USBD_StdDevReq>
 8006986:	4603      	mov	r3, r0
 8006988:	73fb      	strb	r3, [r7, #15]
      break;
 800698a:	e020      	b.n	80069ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fbc5 	bl	8007124 <USBD_StdItfReq>
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
      break;
 800699e:	e016      	b.n	80069ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fc27 	bl	80071fc <USBD_StdEPReq>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73fb      	strb	r3, [r7, #15]
      break;
 80069b2:	e00c      	b.n	80069ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fe46 	bl	8008654 <USBD_LL_StallEP>
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]
      break;
 80069cc:	bf00      	nop
  }

  return ret;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	460b      	mov	r3, r1
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069ea:	7afb      	ldrb	r3, [r7, #11]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d16e      	bne.n	8006ace <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80069f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	f040 8098 	bne.w	8006b34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d913      	bls.n	8006a38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	1ad2      	subs	r2, r2, r3
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	bf28      	it	cs
 8006a2a:	4613      	movcs	r3, r2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f001 f9ac 	bl	8007d8e <USBD_CtlContinueRx>
 8006a36:	e07d      	b.n	8006b34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d014      	beq.n	8006a70 <USBD_LL_DataOutStage+0x98>
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d81d      	bhi.n	8006a86 <USBD_LL_DataOutStage+0xae>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <USBD_LL_DataOutStage+0x7c>
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d003      	beq.n	8006a5a <USBD_LL_DataOutStage+0x82>
 8006a52:	e018      	b.n	8006a86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	75bb      	strb	r3, [r7, #22]
            break;
 8006a58:	e018      	b.n	8006a8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	4619      	mov	r1, r3
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fa5e 	bl	8006f26 <USBD_CoreFindIF>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a6e:	e00d      	b.n	8006a8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fa60 	bl	8006f40 <USBD_CoreFindEP>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75bb      	strb	r3, [r7, #22]
            break;
 8006a84:	e002      	b.n	8006a8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75bb      	strb	r3, [r7, #22]
            break;
 8006a8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a8c:	7dbb      	ldrb	r3, [r7, #22]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d119      	bne.n	8006ac6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d113      	bne.n	8006ac6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a9e:	7dba      	ldrb	r2, [r7, #22]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	32ae      	adds	r2, #174	@ 0xae
 8006aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006aae:	7dba      	ldrb	r2, [r7, #22]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ab6:	7dba      	ldrb	r2, [r7, #22]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	32ae      	adds	r2, #174	@ 0xae
 8006abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f001 f972 	bl	8007db0 <USBD_CtlSendStatus>
 8006acc:	e032      	b.n	8006b34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ace:	7afb      	ldrb	r3, [r7, #11]
 8006ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fa31 	bl	8006f40 <USBD_CoreFindEP>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ae2:	7dbb      	ldrb	r3, [r7, #22]
 8006ae4:	2bff      	cmp	r3, #255	@ 0xff
 8006ae6:	d025      	beq.n	8006b34 <USBD_LL_DataOutStage+0x15c>
 8006ae8:	7dbb      	ldrb	r3, [r7, #22]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d122      	bne.n	8006b34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d117      	bne.n	8006b2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006afa:	7dba      	ldrb	r2, [r7, #22]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	32ae      	adds	r2, #174	@ 0xae
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00f      	beq.n	8006b2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b0a:	7dba      	ldrb	r2, [r7, #22]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b12:	7dba      	ldrb	r2, [r7, #22]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	32ae      	adds	r2, #174	@ 0xae
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	7afa      	ldrb	r2, [r7, #11]
 8006b20:	4611      	mov	r1, r2
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	4798      	blx	r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	e000      	b.n	8006b36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	460b      	mov	r3, r1
 8006b48:	607a      	str	r2, [r7, #4]
 8006b4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d16f      	bne.n	8006c32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3314      	adds	r3, #20
 8006b56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d15a      	bne.n	8006c18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d914      	bls.n	8006b98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	1ad2      	subs	r2, r2, r3
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	461a      	mov	r2, r3
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f001 f8d4 	bl	8007d32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2100      	movs	r1, #0
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f001 fe09 	bl	80087a8 <USBD_LL_PrepareReceive>
 8006b96:	e03f      	b.n	8006c18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d11c      	bne.n	8006bde <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d316      	bcc.n	8006bde <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d20f      	bcs.n	8006bde <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f001 f8b5 	bl	8007d32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f001 fde6 	bl	80087a8 <USBD_LL_PrepareReceive>
 8006bdc:	e01c      	b.n	8006c18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d10f      	bne.n	8006c0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c0a:	2180      	movs	r1, #128	@ 0x80
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f001 fd21 	bl	8008654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f001 f8df 	bl	8007dd6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d03a      	beq.n	8006c98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f7ff fe42 	bl	80068ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006c30:	e032      	b.n	8006c98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c32:	7afb      	ldrb	r3, [r7, #11]
 8006c34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f97f 	bl	8006f40 <USBD_CoreFindEP>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
 8006c48:	2bff      	cmp	r3, #255	@ 0xff
 8006c4a:	d025      	beq.n	8006c98 <USBD_LL_DataInStage+0x15a>
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d122      	bne.n	8006c98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d11c      	bne.n	8006c98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c5e:	7dfa      	ldrb	r2, [r7, #23]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	32ae      	adds	r2, #174	@ 0xae
 8006c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d014      	beq.n	8006c98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c6e:	7dfa      	ldrb	r2, [r7, #23]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c76:	7dfa      	ldrb	r2, [r7, #23]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	32ae      	adds	r2, #174	@ 0xae
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	7afa      	ldrb	r2, [r7, #11]
 8006c84:	4611      	mov	r1, r2
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	4798      	blx	r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c8e:	7dbb      	ldrb	r3, [r7, #22]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c94:	7dbb      	ldrb	r3, [r7, #22]
 8006c96:	e000      	b.n	8006c9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d014      	beq.n	8006d08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00e      	beq.n	8006d08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6852      	ldr	r2, [r2, #4]
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d08:	2340      	movs	r3, #64	@ 0x40
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fc5b 	bl	80085ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2240      	movs	r2, #64	@ 0x40
 8006d20:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d24:	2340      	movs	r3, #64	@ 0x40
 8006d26:	2200      	movs	r2, #0
 8006d28:	2180      	movs	r1, #128	@ 0x80
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 fc4d 	bl	80085ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2240      	movs	r2, #64	@ 0x40
 8006d3a:	621a      	str	r2, [r3, #32]

  return ret;
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2204      	movs	r2, #4
 8006d80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d106      	bne.n	8006db4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d110      	bne.n	8006df8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	32ae      	adds	r2, #174	@ 0xae
 8006e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e01c      	b.n	8006e5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d115      	bne.n	8006e5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32ae      	adds	r2, #174	@ 0xae
 8006e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	32ae      	adds	r2, #174	@ 0xae
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	4611      	mov	r1, r2
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	32ae      	adds	r2, #174	@ 0xae
 8006e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e01c      	b.n	8006ec2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d115      	bne.n	8006ec0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	32ae      	adds	r2, #174	@ 0xae
 8006e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00b      	beq.n	8006ec0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	32ae      	adds	r2, #174	@ 0xae
 8006eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	4611      	mov	r1, r2
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00e      	beq.n	8006f1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6852      	ldr	r2, [r2, #4]
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b086      	sub	sp, #24
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	885b      	ldrh	r3, [r3, #2]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	7812      	ldrb	r2, [r2, #0]
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d91f      	bls.n	8006fc0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f86:	e013      	b.n	8006fb0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f88:	f107 030a 	add.w	r3, r7, #10
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6978      	ldr	r0, [r7, #20]
 8006f90:	f000 f81b 	bl	8006fca <USBD_GetNextDesc>
 8006f94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b05      	cmp	r3, #5
 8006f9c:	d108      	bne.n	8006fb0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	789b      	ldrb	r3, [r3, #2]
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d008      	beq.n	8006fbe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	885b      	ldrh	r3, [r3, #2]
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	897b      	ldrh	r3, [r7, #10]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d8e5      	bhi.n	8006f88 <USBD_GetEpDesc+0x2e>
 8006fbc:	e000      	b.n	8006fc0 <USBD_GetEpDesc+0x66>
          break;
 8006fbe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006fc0:	693b      	ldr	r3, [r7, #16]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	7812      	ldrb	r2, [r2, #0]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	3301      	adds	r3, #1
 8007018:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007020:	8a3b      	ldrh	r3, [r7, #16]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	b21a      	sxth	r2, r3
 8007026:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800702a:	4313      	orrs	r3, r2
 800702c:	b21b      	sxth	r3, r3
 800702e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007030:	89fb      	ldrh	r3, [r7, #14]
}
 8007032:	4618      	mov	r0, r3
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007056:	2b40      	cmp	r3, #64	@ 0x40
 8007058:	d005      	beq.n	8007066 <USBD_StdDevReq+0x26>
 800705a:	2b40      	cmp	r3, #64	@ 0x40
 800705c:	d857      	bhi.n	800710e <USBD_StdDevReq+0xce>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00f      	beq.n	8007082 <USBD_StdDevReq+0x42>
 8007062:	2b20      	cmp	r3, #32
 8007064:	d153      	bne.n	800710e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	32ae      	adds	r2, #174	@ 0xae
 8007070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]
      break;
 8007080:	e04a      	b.n	8007118 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b09      	cmp	r3, #9
 8007088:	d83b      	bhi.n	8007102 <USBD_StdDevReq+0xc2>
 800708a:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <USBD_StdDevReq+0x50>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070e5 	.word	0x080070e5
 8007094:	080070f9 	.word	0x080070f9
 8007098:	08007103 	.word	0x08007103
 800709c:	080070ef 	.word	0x080070ef
 80070a0:	08007103 	.word	0x08007103
 80070a4:	080070c3 	.word	0x080070c3
 80070a8:	080070b9 	.word	0x080070b9
 80070ac:	08007103 	.word	0x08007103
 80070b0:	080070db 	.word	0x080070db
 80070b4:	080070cd 	.word	0x080070cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa3c 	bl	8007538 <USBD_GetDescriptor>
          break;
 80070c0:	e024      	b.n	800710c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fbcb 	bl	8007860 <USBD_SetAddress>
          break;
 80070ca:	e01f      	b.n	800710c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc0a 	bl	80078e8 <USBD_SetConfig>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
          break;
 80070d8:	e018      	b.n	800710c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fcad 	bl	8007a3c <USBD_GetConfig>
          break;
 80070e2:	e013      	b.n	800710c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fcde 	bl	8007aa8 <USBD_GetStatus>
          break;
 80070ec:	e00e      	b.n	800710c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fd0d 	bl	8007b10 <USBD_SetFeature>
          break;
 80070f6:	e009      	b.n	800710c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fd31 	bl	8007b62 <USBD_ClrFeature>
          break;
 8007100:	e004      	b.n	800710c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fd88 	bl	8007c1a <USBD_CtlError>
          break;
 800710a:	bf00      	nop
      }
      break;
 800710c:	e004      	b.n	8007118 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fd82 	bl	8007c1a <USBD_CtlError>
      break;
 8007116:	bf00      	nop
  }

  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800713a:	2b40      	cmp	r3, #64	@ 0x40
 800713c:	d005      	beq.n	800714a <USBD_StdItfReq+0x26>
 800713e:	2b40      	cmp	r3, #64	@ 0x40
 8007140:	d852      	bhi.n	80071e8 <USBD_StdItfReq+0xc4>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <USBD_StdItfReq+0x26>
 8007146:	2b20      	cmp	r3, #32
 8007148:	d14e      	bne.n	80071e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007150:	b2db      	uxtb	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	2b02      	cmp	r3, #2
 8007156:	d840      	bhi.n	80071da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	889b      	ldrh	r3, [r3, #4]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b01      	cmp	r3, #1
 8007160:	d836      	bhi.n	80071d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	889b      	ldrh	r3, [r3, #4]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff fedb 	bl	8006f26 <USBD_CoreFindIF>
 8007170:	4603      	mov	r3, r0
 8007172:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	2bff      	cmp	r3, #255	@ 0xff
 8007178:	d01d      	beq.n	80071b6 <USBD_StdItfReq+0x92>
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d11a      	bne.n	80071b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007180:	7bba      	ldrb	r2, [r7, #14]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	32ae      	adds	r2, #174	@ 0xae
 8007186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00f      	beq.n	80071b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007190:	7bba      	ldrb	r2, [r7, #14]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007198:	7bba      	ldrb	r2, [r7, #14]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	32ae      	adds	r2, #174	@ 0xae
 800719e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071ae:	e004      	b.n	80071ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80071b0:	2303      	movs	r3, #3
 80071b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071b4:	e001      	b.n	80071ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	88db      	ldrh	r3, [r3, #6]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d110      	bne.n	80071e4 <USBD_StdItfReq+0xc0>
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10d      	bne.n	80071e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fdf1 	bl	8007db0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071ce:	e009      	b.n	80071e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fd21 	bl	8007c1a <USBD_CtlError>
          break;
 80071d8:	e004      	b.n	80071e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fd1c 	bl	8007c1a <USBD_CtlError>
          break;
 80071e2:	e000      	b.n	80071e6 <USBD_StdItfReq+0xc2>
          break;
 80071e4:	bf00      	nop
      }
      break;
 80071e6:	e004      	b.n	80071f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fd15 	bl	8007c1a <USBD_CtlError>
      break;
 80071f0:	bf00      	nop
  }

  return ret;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	889b      	ldrh	r3, [r3, #4]
 800720e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007218:	2b40      	cmp	r3, #64	@ 0x40
 800721a:	d007      	beq.n	800722c <USBD_StdEPReq+0x30>
 800721c:	2b40      	cmp	r3, #64	@ 0x40
 800721e:	f200 817f 	bhi.w	8007520 <USBD_StdEPReq+0x324>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02a      	beq.n	800727c <USBD_StdEPReq+0x80>
 8007226:	2b20      	cmp	r3, #32
 8007228:	f040 817a 	bne.w	8007520 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff fe85 	bl	8006f40 <USBD_CoreFindEP>
 8007236:	4603      	mov	r3, r0
 8007238:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800723a:	7b7b      	ldrb	r3, [r7, #13]
 800723c:	2bff      	cmp	r3, #255	@ 0xff
 800723e:	f000 8174 	beq.w	800752a <USBD_StdEPReq+0x32e>
 8007242:	7b7b      	ldrb	r3, [r7, #13]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f040 8170 	bne.w	800752a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800724a:	7b7a      	ldrb	r2, [r7, #13]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007252:	7b7a      	ldrb	r2, [r7, #13]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	32ae      	adds	r2, #174	@ 0xae
 8007258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 8163 	beq.w	800752a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007264:	7b7a      	ldrb	r2, [r7, #13]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	32ae      	adds	r2, #174	@ 0xae
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800727a:	e156      	b.n	800752a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d008      	beq.n	8007296 <USBD_StdEPReq+0x9a>
 8007284:	2b03      	cmp	r3, #3
 8007286:	f300 8145 	bgt.w	8007514 <USBD_StdEPReq+0x318>
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 809b 	beq.w	80073c6 <USBD_StdEPReq+0x1ca>
 8007290:	2b01      	cmp	r3, #1
 8007292:	d03c      	beq.n	800730e <USBD_StdEPReq+0x112>
 8007294:	e13e      	b.n	8007514 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d002      	beq.n	80072a8 <USBD_StdEPReq+0xac>
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d016      	beq.n	80072d4 <USBD_StdEPReq+0xd8>
 80072a6:	e02c      	b.n	8007302 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <USBD_StdEPReq+0xce>
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b80      	cmp	r3, #128	@ 0x80
 80072b2:	d00a      	beq.n	80072ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 f9cb 	bl	8008654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072be:	2180      	movs	r1, #128	@ 0x80
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 f9c7 	bl	8008654 <USBD_LL_StallEP>
 80072c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072c8:	e020      	b.n	800730c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fca4 	bl	8007c1a <USBD_CtlError>
              break;
 80072d2:	e01b      	b.n	800730c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	885b      	ldrh	r3, [r3, #2]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10e      	bne.n	80072fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00b      	beq.n	80072fa <USBD_StdEPReq+0xfe>
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b80      	cmp	r3, #128	@ 0x80
 80072e6:	d008      	beq.n	80072fa <USBD_StdEPReq+0xfe>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88db      	ldrh	r3, [r3, #6]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 f9ad 	bl	8008654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fd58 	bl	8007db0 <USBD_CtlSendStatus>

              break;
 8007300:	e004      	b.n	800730c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fc88 	bl	8007c1a <USBD_CtlError>
              break;
 800730a:	bf00      	nop
          }
          break;
 800730c:	e107      	b.n	800751e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d002      	beq.n	8007320 <USBD_StdEPReq+0x124>
 800731a:	2b03      	cmp	r3, #3
 800731c:	d016      	beq.n	800734c <USBD_StdEPReq+0x150>
 800731e:	e04b      	b.n	80073b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00d      	beq.n	8007342 <USBD_StdEPReq+0x146>
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b80      	cmp	r3, #128	@ 0x80
 800732a:	d00a      	beq.n	8007342 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f98f 	bl	8008654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007336:	2180      	movs	r1, #128	@ 0x80
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f98b 	bl	8008654 <USBD_LL_StallEP>
 800733e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007340:	e040      	b.n	80073c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fc68 	bl	8007c1a <USBD_CtlError>
              break;
 800734a:	e03b      	b.n	80073c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	885b      	ldrh	r3, [r3, #2]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d136      	bne.n	80073c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 f995 	bl	8008692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fd21 	bl	8007db0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fde4 	bl	8006f40 <USBD_CoreFindEP>
 8007378:	4603      	mov	r3, r0
 800737a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800737c:	7b7b      	ldrb	r3, [r7, #13]
 800737e:	2bff      	cmp	r3, #255	@ 0xff
 8007380:	d01f      	beq.n	80073c2 <USBD_StdEPReq+0x1c6>
 8007382:	7b7b      	ldrb	r3, [r7, #13]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d11c      	bne.n	80073c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007388:	7b7a      	ldrb	r2, [r7, #13]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007390:	7b7a      	ldrb	r2, [r7, #13]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32ae      	adds	r2, #174	@ 0xae
 8007396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073a0:	7b7a      	ldrb	r2, [r7, #13]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	32ae      	adds	r2, #174	@ 0xae
 80073a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80073b6:	e004      	b.n	80073c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fc2d 	bl	8007c1a <USBD_CtlError>
              break;
 80073c0:	e000      	b.n	80073c4 <USBD_StdEPReq+0x1c8>
              break;
 80073c2:	bf00      	nop
          }
          break;
 80073c4:	e0ab      	b.n	800751e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d002      	beq.n	80073d8 <USBD_StdEPReq+0x1dc>
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d032      	beq.n	800743c <USBD_StdEPReq+0x240>
 80073d6:	e097      	b.n	8007508 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <USBD_StdEPReq+0x1f2>
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	2b80      	cmp	r3, #128	@ 0x80
 80073e2:	d004      	beq.n	80073ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fc17 	bl	8007c1a <USBD_CtlError>
                break;
 80073ec:	e091      	b.n	8007512 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	da0b      	bge.n	800740e <USBD_StdEPReq+0x212>
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	3310      	adds	r3, #16
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	3304      	adds	r3, #4
 800740c:	e00b      	b.n	8007426 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	3304      	adds	r3, #4
 8007426:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2202      	movs	r2, #2
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc61 	bl	8007cfc <USBD_CtlSendData>
              break;
 800743a:	e06a      	b.n	8007512 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800743c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	da11      	bge.n	8007468 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	f003 020f 	and.w	r2, r3, #15
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	3324      	adds	r3, #36	@ 0x24
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d117      	bne.n	800748e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fbda 	bl	8007c1a <USBD_CtlError>
                  break;
 8007466:	e054      	b.n	8007512 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	f003 020f 	and.w	r2, r3, #15
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fbc7 	bl	8007c1a <USBD_CtlError>
                  break;
 800748c:	e041      	b.n	8007512 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800748e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007492:	2b00      	cmp	r3, #0
 8007494:	da0b      	bge.n	80074ae <USBD_StdEPReq+0x2b2>
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	3310      	adds	r3, #16
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4413      	add	r3, r2
 80074aa:	3304      	adds	r3, #4
 80074ac:	e00b      	b.n	80074c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	3304      	adds	r3, #4
 80074c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <USBD_StdEPReq+0x2d8>
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b80      	cmp	r3, #128	@ 0x80
 80074d2:	d103      	bne.n	80074dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e00e      	b.n	80074fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 f8f5 	bl	80086d0 <USBD_LL_IsStallEP>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2201      	movs	r2, #1
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e002      	b.n	80074fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2202      	movs	r2, #2
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fbfb 	bl	8007cfc <USBD_CtlSendData>
              break;
 8007506:	e004      	b.n	8007512 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fb85 	bl	8007c1a <USBD_CtlError>
              break;
 8007510:	bf00      	nop
          }
          break;
 8007512:	e004      	b.n	800751e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fb7f 	bl	8007c1a <USBD_CtlError>
          break;
 800751c:	bf00      	nop
      }
      break;
 800751e:	e005      	b.n	800752c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fb79 	bl	8007c1a <USBD_CtlError>
      break;
 8007528:	e000      	b.n	800752c <USBD_StdEPReq+0x330>
      break;
 800752a:	bf00      	nop
  }

  return ret;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	885b      	ldrh	r3, [r3, #2]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	2b0e      	cmp	r3, #14
 800755a:	f200 8152 	bhi.w	8007802 <USBD_GetDescriptor+0x2ca>
 800755e:	a201      	add	r2, pc, #4	@ (adr r2, 8007564 <USBD_GetDescriptor+0x2c>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	080075d5 	.word	0x080075d5
 8007568:	080075ed 	.word	0x080075ed
 800756c:	0800762d 	.word	0x0800762d
 8007570:	08007803 	.word	0x08007803
 8007574:	08007803 	.word	0x08007803
 8007578:	080077a3 	.word	0x080077a3
 800757c:	080077cf 	.word	0x080077cf
 8007580:	08007803 	.word	0x08007803
 8007584:	08007803 	.word	0x08007803
 8007588:	08007803 	.word	0x08007803
 800758c:	08007803 	.word	0x08007803
 8007590:	08007803 	.word	0x08007803
 8007594:	08007803 	.word	0x08007803
 8007598:	08007803 	.word	0x08007803
 800759c:	080075a1 	.word	0x080075a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	7c12      	ldrb	r2, [r2, #16]
 80075b8:	f107 0108 	add.w	r1, r7, #8
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
 80075c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075c2:	e126      	b.n	8007812 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fb27 	bl	8007c1a <USBD_CtlError>
        err++;
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	3301      	adds	r3, #1
 80075d0:	72fb      	strb	r3, [r7, #11]
      break;
 80075d2:	e11e      	b.n	8007812 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7c12      	ldrb	r2, [r2, #16]
 80075e0:	f107 0108 	add.w	r1, r7, #8
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
 80075e8:	60f8      	str	r0, [r7, #12]
      break;
 80075ea:	e112      	b.n	8007812 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7c1b      	ldrb	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	f107 0208 	add.w	r2, r7, #8
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
 8007604:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	2202      	movs	r2, #2
 800760c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800760e:	e100      	b.n	8007812 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	f107 0208 	add.w	r2, r7, #8
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
 8007620:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3301      	adds	r3, #1
 8007626:	2202      	movs	r2, #2
 8007628:	701a      	strb	r2, [r3, #0]
      break;
 800762a:	e0f2      	b.n	8007812 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	885b      	ldrh	r3, [r3, #2]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b05      	cmp	r3, #5
 8007634:	f200 80ac 	bhi.w	8007790 <USBD_GetDescriptor+0x258>
 8007638:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <USBD_GetDescriptor+0x108>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007659 	.word	0x08007659
 8007644:	0800768d 	.word	0x0800768d
 8007648:	080076c1 	.word	0x080076c1
 800764c:	080076f5 	.word	0x080076f5
 8007650:	08007729 	.word	0x08007729
 8007654:	0800775d 	.word	0x0800775d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	7c12      	ldrb	r2, [r2, #16]
 8007670:	f107 0108 	add.w	r1, r7, #8
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800767a:	e091      	b.n	80077a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 facb 	bl	8007c1a <USBD_CtlError>
            err++;
 8007684:	7afb      	ldrb	r3, [r7, #11]
 8007686:	3301      	adds	r3, #1
 8007688:	72fb      	strb	r3, [r7, #11]
          break;
 800768a:	e089      	b.n	80077a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00b      	beq.n	80076b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	7c12      	ldrb	r2, [r2, #16]
 80076a4:	f107 0108 	add.w	r1, r7, #8
 80076a8:	4610      	mov	r0, r2
 80076aa:	4798      	blx	r3
 80076ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ae:	e077      	b.n	80077a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fab1 	bl	8007c1a <USBD_CtlError>
            err++;
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	3301      	adds	r3, #1
 80076bc:	72fb      	strb	r3, [r7, #11]
          break;
 80076be:	e06f      	b.n	80077a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	7c12      	ldrb	r2, [r2, #16]
 80076d8:	f107 0108 	add.w	r1, r7, #8
 80076dc:	4610      	mov	r0, r2
 80076de:	4798      	blx	r3
 80076e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e2:	e05d      	b.n	80077a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa97 	bl	8007c1a <USBD_CtlError>
            err++;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	3301      	adds	r3, #1
 80076f0:	72fb      	strb	r3, [r7, #11]
          break;
 80076f2:	e055      	b.n	80077a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	7c12      	ldrb	r2, [r2, #16]
 800770c:	f107 0108 	add.w	r1, r7, #8
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
 8007714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007716:	e043      	b.n	80077a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa7d 	bl	8007c1a <USBD_CtlError>
            err++;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3301      	adds	r3, #1
 8007724:	72fb      	strb	r3, [r7, #11]
          break;
 8007726:	e03b      	b.n	80077a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 0108 	add.w	r1, r7, #8
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774a:	e029      	b.n	80077a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa63 	bl	8007c1a <USBD_CtlError>
            err++;
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	3301      	adds	r3, #1
 8007758:	72fb      	strb	r3, [r7, #11]
          break;
 800775a:	e021      	b.n	80077a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7c12      	ldrb	r2, [r2, #16]
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800777e:	e00f      	b.n	80077a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa49 	bl	8007c1a <USBD_CtlError>
            err++;
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	3301      	adds	r3, #1
 800778c:	72fb      	strb	r3, [r7, #11]
          break;
 800778e:	e007      	b.n	80077a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa41 	bl	8007c1a <USBD_CtlError>
          err++;
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	3301      	adds	r3, #1
 800779c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800779e:	bf00      	nop
      }
      break;
 80077a0:	e037      	b.n	8007812 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7c1b      	ldrb	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b2:	f107 0208 	add.w	r2, r7, #8
 80077b6:	4610      	mov	r0, r2
 80077b8:	4798      	blx	r3
 80077ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077bc:	e029      	b.n	8007812 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa2a 	bl	8007c1a <USBD_CtlError>
        err++;
 80077c6:	7afb      	ldrb	r3, [r7, #11]
 80077c8:	3301      	adds	r3, #1
 80077ca:	72fb      	strb	r3, [r7, #11]
      break;
 80077cc:	e021      	b.n	8007812 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7c1b      	ldrb	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10d      	bne.n	80077f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077de:	f107 0208 	add.w	r2, r7, #8
 80077e2:	4610      	mov	r0, r2
 80077e4:	4798      	blx	r3
 80077e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3301      	adds	r3, #1
 80077ec:	2207      	movs	r2, #7
 80077ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077f0:	e00f      	b.n	8007812 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fa10 	bl	8007c1a <USBD_CtlError>
        err++;
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	3301      	adds	r3, #1
 80077fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007800:	e007      	b.n	8007812 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fa08 	bl	8007c1a <USBD_CtlError>
      err++;
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	3301      	adds	r3, #1
 800780e:	72fb      	strb	r3, [r7, #11]
      break;
 8007810:	bf00      	nop
  }

  if (err != 0U)
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d11e      	bne.n	8007856 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	88db      	ldrh	r3, [r3, #6]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d016      	beq.n	800784e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007820:	893b      	ldrh	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	88da      	ldrh	r2, [r3, #6]
 800782a:	893b      	ldrh	r3, [r7, #8]
 800782c:	4293      	cmp	r3, r2
 800782e:	bf28      	it	cs
 8007830:	4613      	movcs	r3, r2
 8007832:	b29b      	uxth	r3, r3
 8007834:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007836:	893b      	ldrh	r3, [r7, #8]
 8007838:	461a      	mov	r2, r3
 800783a:	68f9      	ldr	r1, [r7, #12]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa5d 	bl	8007cfc <USBD_CtlSendData>
 8007842:	e009      	b.n	8007858 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9e7 	bl	8007c1a <USBD_CtlError>
 800784c:	e004      	b.n	8007858 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 faae 	bl	8007db0 <USBD_CtlSendStatus>
 8007854:	e000      	b.n	8007858 <USBD_GetDescriptor+0x320>
    return;
 8007856:	bf00      	nop
  }
}
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop

08007860 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	889b      	ldrh	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d131      	bne.n	80078d6 <USBD_SetAddress+0x76>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	88db      	ldrh	r3, [r3, #6]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d12d      	bne.n	80078d6 <USBD_SetAddress+0x76>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	885b      	ldrh	r3, [r3, #2]
 800787e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007880:	d829      	bhi.n	80078d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	885b      	ldrh	r3, [r3, #2]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800788c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b03      	cmp	r3, #3
 8007898:	d104      	bne.n	80078a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f9bc 	bl	8007c1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a2:	e01d      	b.n	80078e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7bfa      	ldrb	r2, [r7, #15]
 80078a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 ff39 	bl	8008728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa7a 	bl	8007db0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ca:	e009      	b.n	80078e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d4:	e004      	b.n	80078e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f99e 	bl	8007c1a <USBD_CtlError>
  }
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	885b      	ldrh	r3, [r3, #2]
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	4b4e      	ldr	r3, [pc, #312]	@ (8007a38 <USBD_SetConfig+0x150>)
 80078fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007900:	4b4d      	ldr	r3, [pc, #308]	@ (8007a38 <USBD_SetConfig+0x150>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d905      	bls.n	8007914 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f985 	bl	8007c1a <USBD_CtlError>
    return USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	e08c      	b.n	8007a2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d002      	beq.n	8007926 <USBD_SetConfig+0x3e>
 8007920:	2b03      	cmp	r3, #3
 8007922:	d029      	beq.n	8007978 <USBD_SetConfig+0x90>
 8007924:	e075      	b.n	8007a12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007926:	4b44      	ldr	r3, [pc, #272]	@ (8007a38 <USBD_SetConfig+0x150>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d020      	beq.n	8007970 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800792e:	4b42      	ldr	r3, [pc, #264]	@ (8007a38 <USBD_SetConfig+0x150>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007938:	4b3f      	ldr	r3, [pc, #252]	@ (8007a38 <USBD_SetConfig+0x150>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7fe ffbf 	bl	80068c2 <USBD_SetClassConfig>
 8007944:	4603      	mov	r3, r0
 8007946:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f962 	bl	8007c1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2202      	movs	r2, #2
 800795a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800795e:	e065      	b.n	8007a2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fa25 	bl	8007db0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2203      	movs	r2, #3
 800796a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800796e:	e05d      	b.n	8007a2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fa1d 	bl	8007db0 <USBD_CtlSendStatus>
      break;
 8007976:	e059      	b.n	8007a2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007978:	4b2f      	ldr	r3, [pc, #188]	@ (8007a38 <USBD_SetConfig+0x150>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d112      	bne.n	80079a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007988:	4b2b      	ldr	r3, [pc, #172]	@ (8007a38 <USBD_SetConfig+0x150>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007992:	4b29      	ldr	r3, [pc, #164]	@ (8007a38 <USBD_SetConfig+0x150>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7fe ffae 	bl	80068fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa06 	bl	8007db0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079a4:	e042      	b.n	8007a2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80079a6:	4b24      	ldr	r3, [pc, #144]	@ (8007a38 <USBD_SetConfig+0x150>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d02a      	beq.n	8007a0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7fe ff9c 	bl	80068fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a38 <USBD_SetConfig+0x150>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a38 <USBD_SetConfig+0x150>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fe ff75 	bl	80068c2 <USBD_SetClassConfig>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00f      	beq.n	8007a02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f918 	bl	8007c1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7fe ff81 	bl	80068fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a00:	e014      	b.n	8007a2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f9d4 	bl	8007db0 <USBD_CtlSendStatus>
      break;
 8007a08:	e010      	b.n	8007a2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f9d0 	bl	8007db0 <USBD_CtlSendStatus>
      break;
 8007a10:	e00c      	b.n	8007a2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f900 	bl	8007c1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a1a:	4b07      	ldr	r3, [pc, #28]	@ (8007a38 <USBD_SetConfig+0x150>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7fe ff6a 	bl	80068fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a26:	2303      	movs	r3, #3
 8007a28:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2a:	bf00      	nop
  }

  return ret;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20008220 	.word	0x20008220

08007a3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	88db      	ldrh	r3, [r3, #6]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d004      	beq.n	8007a58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f8e2 	bl	8007c1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a56:	e023      	b.n	8007aa0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	dc02      	bgt.n	8007a6a <USBD_GetConfig+0x2e>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dc03      	bgt.n	8007a70 <USBD_GetConfig+0x34>
 8007a68:	e015      	b.n	8007a96 <USBD_GetConfig+0x5a>
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d00b      	beq.n	8007a86 <USBD_GetConfig+0x4a>
 8007a6e:	e012      	b.n	8007a96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3308      	adds	r3, #8
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f93c 	bl	8007cfc <USBD_CtlSendData>
        break;
 8007a84:	e00c      	b.n	8007aa0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f934 	bl	8007cfc <USBD_CtlSendData>
        break;
 8007a94:	e004      	b.n	8007aa0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f8be 	bl	8007c1a <USBD_CtlError>
        break;
 8007a9e:	bf00      	nop
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d81e      	bhi.n	8007afe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d004      	beq.n	8007ad2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f8a5 	bl	8007c1a <USBD_CtlError>
        break;
 8007ad0:	e01a      	b.n	8007b08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f043 0202 	orr.w	r2, r3, #2
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	330c      	adds	r3, #12
 8007af2:	2202      	movs	r2, #2
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f900 	bl	8007cfc <USBD_CtlSendData>
      break;
 8007afc:	e004      	b.n	8007b08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f88a 	bl	8007c1a <USBD_CtlError>
      break;
 8007b06:	bf00      	nop
  }
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	885b      	ldrh	r3, [r3, #2]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d107      	bne.n	8007b32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f940 	bl	8007db0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b30:	e013      	b.n	8007b5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	885b      	ldrh	r3, [r3, #2]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d10b      	bne.n	8007b52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	889b      	ldrh	r3, [r3, #4]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f930 	bl	8007db0 <USBD_CtlSendStatus>
}
 8007b50:	e003      	b.n	8007b5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f860 	bl	8007c1a <USBD_CtlError>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d80b      	bhi.n	8007b92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	885b      	ldrh	r3, [r3, #2]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d10c      	bne.n	8007b9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f910 	bl	8007db0 <USBD_CtlSendStatus>
      }
      break;
 8007b90:	e004      	b.n	8007b9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f840 	bl	8007c1a <USBD_CtlError>
      break;
 8007b9a:	e000      	b.n	8007b9e <USBD_ClrFeature+0x3c>
      break;
 8007b9c:	bf00      	nop
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	781a      	ldrb	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f7ff fa16 	bl	8007002 <SWAPBYTE>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3301      	adds	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3301      	adds	r3, #1
 8007be8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7ff fa09 	bl	8007002 <SWAPBYTE>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f7ff f9fc 	bl	8007002 <SWAPBYTE>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	80da      	strh	r2, [r3, #6]
}
 8007c12:	bf00      	nop
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c24:	2180      	movs	r1, #128	@ 0x80
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fd14 	bl	8008654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fd10 	bl	8008654 <USBD_LL_StallEP>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d036      	beq.n	8007cc0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f000 f836 	bl	8007cc8 <USBD_GetLen>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	4413      	add	r3, r2
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7812      	ldrb	r2, [r2, #0]
 8007c74:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	4413      	add	r3, r2
 8007c82:	2203      	movs	r2, #3
 8007c84:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c8c:	e013      	b.n	8007cb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	4413      	add	r3, r2
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	613b      	str	r3, [r7, #16]
    idx++;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	4413      	add	r3, r2
 8007cac:	2200      	movs	r2, #0
 8007cae:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e7      	bne.n	8007c8e <USBD_GetString+0x52>
 8007cbe:	e000      	b.n	8007cc2 <USBD_GetString+0x86>
    return;
 8007cc0:	bf00      	nop
  }
}
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007cd8:	e005      	b.n	8007ce6 <USBD_GetLen+0x1e>
  {
    len++;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f5      	bne.n	8007cda <USBD_GetLen+0x12>
  }

  return len;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	2100      	movs	r1, #0
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fd1f 	bl	8008766 <USBD_LL_Transmit>

  return USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	2100      	movs	r1, #0
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 fd0e 	bl	8008766 <USBD_LL_Transmit>

  return USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2203      	movs	r2, #3
 8007d64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fd12 	bl	80087a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	2100      	movs	r1, #0
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fd01 	bl	80087a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2204      	movs	r2, #4
 8007dbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fccd 	bl	8008766 <USBD_LL_Transmit>

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2205      	movs	r2, #5
 8007de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007de6:	2300      	movs	r3, #0
 8007de8:	2200      	movs	r2, #0
 8007dea:	2100      	movs	r1, #0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fcdb 	bl	80087a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e00:	2200      	movs	r2, #0
 8007e02:	4912      	ldr	r1, [pc, #72]	@ (8007e4c <MX_USB_DEVICE_Init+0x50>)
 8007e04:	4812      	ldr	r0, [pc, #72]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e06:	f7fe fcdf 	bl	80067c8 <USBD_Init>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e10:	f7f8 fd7e 	bl	8000910 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e14:	490f      	ldr	r1, [pc, #60]	@ (8007e54 <MX_USB_DEVICE_Init+0x58>)
 8007e16:	480e      	ldr	r0, [pc, #56]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e18:	f7fe fd06 	bl	8006828 <USBD_RegisterClass>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e22:	f7f8 fd75 	bl	8000910 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e26:	490c      	ldr	r1, [pc, #48]	@ (8007e58 <MX_USB_DEVICE_Init+0x5c>)
 8007e28:	4809      	ldr	r0, [pc, #36]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e2a:	f7fe fbfd 	bl	8006628 <USBD_CDC_RegisterInterface>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e34:	f7f8 fd6c 	bl	8000910 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e38:	4805      	ldr	r0, [pc, #20]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e3a:	f7fe fd2b 	bl	8006894 <USBD_Start>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e44:	f7f8 fd64 	bl	8000910 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e48:	bf00      	nop
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200000ac 	.word	0x200000ac
 8007e50:	20008224 	.word	0x20008224
 8007e54:	20000018 	.word	0x20000018
 8007e58:	20000098 	.word	0x20000098

08007e5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e60:	2200      	movs	r2, #0
 8007e62:	4905      	ldr	r1, [pc, #20]	@ (8007e78 <CDC_Init_FS+0x1c>)
 8007e64:	4805      	ldr	r0, [pc, #20]	@ (8007e7c <CDC_Init_FS+0x20>)
 8007e66:	f7fe fbf9 	bl	800665c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e6a:	4905      	ldr	r1, [pc, #20]	@ (8007e80 <CDC_Init_FS+0x24>)
 8007e6c:	4803      	ldr	r0, [pc, #12]	@ (8007e7c <CDC_Init_FS+0x20>)
 8007e6e:	f7fe fc17 	bl	80066a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	20008d00 	.word	0x20008d00
 8007e7c:	20008224 	.word	0x20008224
 8007e80:	20008500 	.word	0x20008500

08007e84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	2b23      	cmp	r3, #35	@ 0x23
 8007ea8:	d84a      	bhi.n	8007f40 <CDC_Control_FS+0xac>
 8007eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb0 <CDC_Control_FS+0x1c>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007f41 	.word	0x08007f41
 8007eb4:	08007f41 	.word	0x08007f41
 8007eb8:	08007f41 	.word	0x08007f41
 8007ebc:	08007f41 	.word	0x08007f41
 8007ec0:	08007f41 	.word	0x08007f41
 8007ec4:	08007f41 	.word	0x08007f41
 8007ec8:	08007f41 	.word	0x08007f41
 8007ecc:	08007f41 	.word	0x08007f41
 8007ed0:	08007f41 	.word	0x08007f41
 8007ed4:	08007f41 	.word	0x08007f41
 8007ed8:	08007f41 	.word	0x08007f41
 8007edc:	08007f41 	.word	0x08007f41
 8007ee0:	08007f41 	.word	0x08007f41
 8007ee4:	08007f41 	.word	0x08007f41
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f41 	.word	0x08007f41
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007f41 	.word	0x08007f41
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f41 	.word	0x08007f41
 8007f00:	08007f41 	.word	0x08007f41
 8007f04:	08007f41 	.word	0x08007f41
 8007f08:	08007f41 	.word	0x08007f41
 8007f0c:	08007f41 	.word	0x08007f41
 8007f10:	08007f41 	.word	0x08007f41
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f41 	.word	0x08007f41
 8007f20:	08007f41 	.word	0x08007f41
 8007f24:	08007f41 	.word	0x08007f41
 8007f28:	08007f41 	.word	0x08007f41
 8007f2c:	08007f41 	.word	0x08007f41
 8007f30:	08007f41 	.word	0x08007f41
 8007f34:	08007f41 	.word	0x08007f41
 8007f38:	08007f41 	.word	0x08007f41
 8007f3c:	08007f41 	.word	0x08007f41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f40:	bf00      	nop
  }

  return (USBD_OK);
 8007f42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4805      	ldr	r0, [pc, #20]	@ (8007f74 <CDC_Receive_FS+0x24>)
 8007f5e:	f7fe fb9f 	bl	80066a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f62:	4804      	ldr	r0, [pc, #16]	@ (8007f74 <CDC_Receive_FS+0x24>)
 8007f64:	f7fe fbfa 	bl	800675c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20008224 	.word	0x20008224

08007f78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f88:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <CDC_Transmit_FS+0x48>)
 8007f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e00b      	b.n	8007fb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f9e:	887b      	ldrh	r3, [r7, #2]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	4806      	ldr	r0, [pc, #24]	@ (8007fc0 <CDC_Transmit_FS+0x48>)
 8007fa6:	f7fe fb59 	bl	800665c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007faa:	4805      	ldr	r0, [pc, #20]	@ (8007fc0 <CDC_Transmit_FS+0x48>)
 8007fac:	f7fe fb96 	bl	80066dc <USBD_CDC_TransmitPacket>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20008224 	.word	0x20008224

08007fc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2212      	movs	r2, #18
 8007ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ffa:	4b03      	ldr	r3, [pc, #12]	@ (8008008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	200000cc 	.word	0x200000cc

0800800c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2204      	movs	r2, #4
 800801c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800801e:	4b03      	ldr	r3, [pc, #12]	@ (800802c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	200000ec 	.word	0x200000ec

08008030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4907      	ldr	r1, [pc, #28]	@ (8008064 <USBD_FS_ProductStrDescriptor+0x34>)
 8008046:	4808      	ldr	r0, [pc, #32]	@ (8008068 <USBD_FS_ProductStrDescriptor+0x38>)
 8008048:	f7ff fdf8 	bl	8007c3c <USBD_GetString>
 800804c:	e004      	b.n	8008058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	4904      	ldr	r1, [pc, #16]	@ (8008064 <USBD_FS_ProductStrDescriptor+0x34>)
 8008052:	4805      	ldr	r0, [pc, #20]	@ (8008068 <USBD_FS_ProductStrDescriptor+0x38>)
 8008054:	f7ff fdf2 	bl	8007c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008058:	4b02      	ldr	r3, [pc, #8]	@ (8008064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20009500 	.word	0x20009500
 8008068:	08008bc0 	.word	0x08008bc0

0800806c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	4904      	ldr	r1, [pc, #16]	@ (800808c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800807c:	4804      	ldr	r0, [pc, #16]	@ (8008090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800807e:	f7ff fddd 	bl	8007c3c <USBD_GetString>
  return USBD_StrDesc;
 8008082:	4b02      	ldr	r3, [pc, #8]	@ (800808c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20009500 	.word	0x20009500
 8008090:	08008bdc 	.word	0x08008bdc

08008094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	6039      	str	r1, [r7, #0]
 800809e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	221a      	movs	r2, #26
 80080a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080a6:	f000 f855 	bl	8008154 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080aa:	4b02      	ldr	r3, [pc, #8]	@ (80080b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	200000f0 	.word	0x200000f0

080080b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	4907      	ldr	r1, [pc, #28]	@ (80080ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ce:	4808      	ldr	r0, [pc, #32]	@ (80080f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080d0:	f7ff fdb4 	bl	8007c3c <USBD_GetString>
 80080d4:	e004      	b.n	80080e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4904      	ldr	r1, [pc, #16]	@ (80080ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80080da:	4805      	ldr	r0, [pc, #20]	@ (80080f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080dc:	f7ff fdae 	bl	8007c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 80080e0:	4b02      	ldr	r3, [pc, #8]	@ (80080ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	20009500 	.word	0x20009500
 80080f0:	08008bf0 	.word	0x08008bf0

080080f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	6039      	str	r1, [r7, #0]
 80080fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	4907      	ldr	r1, [pc, #28]	@ (8008128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800810a:	4808      	ldr	r0, [pc, #32]	@ (800812c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800810c:	f7ff fd96 	bl	8007c3c <USBD_GetString>
 8008110:	e004      	b.n	800811c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4904      	ldr	r1, [pc, #16]	@ (8008128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008116:	4805      	ldr	r0, [pc, #20]	@ (800812c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008118:	f7ff fd90 	bl	8007c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800811c:	4b02      	ldr	r3, [pc, #8]	@ (8008128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20009500 	.word	0x20009500
 800812c:	08008bfc 	.word	0x08008bfc

08008130 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	220c      	movs	r2, #12
 8008140:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008142:	4b03      	ldr	r3, [pc, #12]	@ (8008150 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	200000e0 	.word	0x200000e0

08008154 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800815a:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <Get_SerialNum+0x44>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008160:	4b0e      	ldr	r3, [pc, #56]	@ (800819c <Get_SerialNum+0x48>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008166:	4b0e      	ldr	r3, [pc, #56]	@ (80081a0 <Get_SerialNum+0x4c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4413      	add	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d009      	beq.n	800818e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800817a:	2208      	movs	r2, #8
 800817c:	4909      	ldr	r1, [pc, #36]	@ (80081a4 <Get_SerialNum+0x50>)
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f814 	bl	80081ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008184:	2204      	movs	r2, #4
 8008186:	4908      	ldr	r1, [pc, #32]	@ (80081a8 <Get_SerialNum+0x54>)
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f000 f80f 	bl	80081ac <IntToUnicode>
  }
}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	1ff07a10 	.word	0x1ff07a10
 800819c:	1ff07a14 	.word	0x1ff07a14
 80081a0:	1ff07a18 	.word	0x1ff07a18
 80081a4:	200000f2 	.word	0x200000f2
 80081a8:	20000102 	.word	0x20000102

080081ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081be:	2300      	movs	r3, #0
 80081c0:	75fb      	strb	r3, [r7, #23]
 80081c2:	e027      	b.n	8008214 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	0f1b      	lsrs	r3, r3, #28
 80081c8:	2b09      	cmp	r3, #9
 80081ca:	d80b      	bhi.n	80081e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	0f1b      	lsrs	r3, r3, #28
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	4619      	mov	r1, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	440b      	add	r3, r1
 80081dc:	3230      	adds	r2, #48	@ 0x30
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	e00a      	b.n	80081fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	0f1b      	lsrs	r3, r3, #28
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4619      	mov	r1, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	440b      	add	r3, r1
 80081f4:	3237      	adds	r2, #55	@ 0x37
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	3301      	adds	r3, #1
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	4413      	add	r3, r2
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	3301      	adds	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
 8008214:	7dfa      	ldrb	r2, [r7, #23]
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	429a      	cmp	r2, r3
 800821a:	d3d3      	bcc.n	80081c4 <IntToUnicode+0x18>
  }
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
	...

0800822c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b0aa      	sub	sp, #168	@ 0xa8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008234:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	605a      	str	r2, [r3, #4]
 800823e:	609a      	str	r2, [r3, #8]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008244:	f107 0314 	add.w	r3, r7, #20
 8008248:	2280      	movs	r2, #128	@ 0x80
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fc1d 	bl	8008a8c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800825a:	d151      	bne.n	8008300 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800825c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008260:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008262:	2300      	movs	r3, #0
 8008264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008268:	f107 0314 	add.w	r3, r7, #20
 800826c:	4618      	mov	r0, r3
 800826e:	f7fb fdbf 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008278:	f7f8 fb4a 	bl	8000910 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800827c:	4b22      	ldr	r3, [pc, #136]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 800827e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008280:	4a21      	ldr	r2, [pc, #132]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	6313      	str	r3, [r2, #48]	@ 0x30
 8008288:	4b1f      	ldr	r3, [pc, #124]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 800828a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008294:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008298:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800829c:	2302      	movs	r3, #2
 800829e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082a8:	2303      	movs	r3, #3
 80082aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082ae:	230a      	movs	r3, #10
 80082b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80082b8:	4619      	mov	r1, r3
 80082ba:	4814      	ldr	r0, [pc, #80]	@ (800830c <HAL_PCD_MspInit+0xe0>)
 80082bc:	f7f9 fa2a 	bl	8001714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082c0:	4b11      	ldr	r3, [pc, #68]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 80082c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c4:	4a10      	ldr	r2, [pc, #64]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 80082c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ca:	6353      	str	r3, [r2, #52]	@ 0x34
 80082cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 80082ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 80082da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 80082de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80082e4:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <HAL_PCD_MspInit+0xdc>)
 80082e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082ec:	60bb      	str	r3, [r7, #8]
 80082ee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082f0:	2200      	movs	r2, #0
 80082f2:	2100      	movs	r1, #0
 80082f4:	2043      	movs	r0, #67	@ 0x43
 80082f6:	f7f8 fde2 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082fa:	2043      	movs	r0, #67	@ 0x43
 80082fc:	f7f8 fdfb 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008300:	bf00      	nop
 8008302:	37a8      	adds	r7, #168	@ 0xa8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	40023800 	.word	0x40023800
 800830c:	40020000 	.word	0x40020000

08008310 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fe fb01 	bl	800692e <USBD_LL_SetupStage>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 8008346:	78fa      	ldrb	r2, [r7, #3]
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	4613      	mov	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	4619      	mov	r1, r3
 800835e:	f7fe fb3b 	bl	80069d8 <USBD_LL_DataOutStage>
}
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4613      	mov	r3, r2
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	334c      	adds	r3, #76	@ 0x4c
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	78fb      	ldrb	r3, [r7, #3]
 8008390:	4619      	mov	r1, r3
 8008392:	f7fe fbd4 	bl	8006b3e <USBD_LL_DataInStage>
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe fd08 	bl	8006dc2 <USBD_LL_SOF>
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083c2:	2301      	movs	r3, #1
 80083c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d102      	bne.n	80083d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
 80083d2:	e008      	b.n	80083e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d102      	bne.n	80083e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
 80083e0:	e001      	b.n	80083e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083e2:	f7f8 fa95 	bl	8000910 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80083ec:	7bfa      	ldrb	r2, [r7, #15]
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe fca8 	bl	8006d46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fc50 	bl	8006ca2 <USBD_LL_Reset>
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fca3 	bl	8006d66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6812      	ldr	r2, [r2, #0]
 800842e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008440:	4b04      	ldr	r3, [pc, #16]	@ (8008454 <HAL_PCD_SuspendCallback+0x48>)
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	4a03      	ldr	r2, [pc, #12]	@ (8008454 <HAL_PCD_SuspendCallback+0x48>)
 8008446:	f043 0306 	orr.w	r3, r3, #6
 800844a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	e000ed00 	.word	0xe000ed00

08008458 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fc93 	bl	8006d92 <USBD_LL_Resume>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fceb 	bl	8006e66 <USBD_LL_IsoOUTIncomplete>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80084aa:	78fa      	ldrb	r2, [r7, #3]
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fca7 	bl	8006e02 <USBD_LL_IsoINIncomplete>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fcfd 	bl	8006eca <USBD_LL_DevConnected>
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fcfa 	bl	8006ee0 <USBD_LL_DevDisconnected>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d13f      	bne.n	8008584 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008504:	4a22      	ldr	r2, [pc, #136]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a20      	ldr	r2, [pc, #128]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008510:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008514:	4b1e      	ldr	r3, [pc, #120]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008516:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800851a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800851c:	4b1c      	ldr	r3, [pc, #112]	@ (8008590 <USBD_LL_Init+0x9c>)
 800851e:	2206      	movs	r2, #6
 8008520:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008522:	4b1b      	ldr	r3, [pc, #108]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008524:	2202      	movs	r2, #2
 8008526:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008528:	4b19      	ldr	r3, [pc, #100]	@ (8008590 <USBD_LL_Init+0x9c>)
 800852a:	2200      	movs	r2, #0
 800852c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800852e:	4b18      	ldr	r3, [pc, #96]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008530:	2202      	movs	r2, #2
 8008532:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008534:	4b16      	ldr	r3, [pc, #88]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008536:	2200      	movs	r2, #0
 8008538:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800853a:	4b15      	ldr	r3, [pc, #84]	@ (8008590 <USBD_LL_Init+0x9c>)
 800853c:	2200      	movs	r2, #0
 800853e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008540:	4b13      	ldr	r3, [pc, #76]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008542:	2200      	movs	r2, #0
 8008544:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008546:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008548:	2200      	movs	r2, #0
 800854a:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800854c:	4b10      	ldr	r3, [pc, #64]	@ (8008590 <USBD_LL_Init+0x9c>)
 800854e:	2200      	movs	r2, #0
 8008550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008552:	4b0f      	ldr	r3, [pc, #60]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008554:	2200      	movs	r2, #0
 8008556:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008558:	480d      	ldr	r0, [pc, #52]	@ (8008590 <USBD_LL_Init+0x9c>)
 800855a:	f7f9 fcde 	bl	8001f1a <HAL_PCD_Init>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008564:	f7f8 f9d4 	bl	8000910 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008568:	2180      	movs	r1, #128	@ 0x80
 800856a:	4809      	ldr	r0, [pc, #36]	@ (8008590 <USBD_LL_Init+0x9c>)
 800856c:	f7fa ff59 	bl	8003422 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008570:	2240      	movs	r2, #64	@ 0x40
 8008572:	2100      	movs	r1, #0
 8008574:	4806      	ldr	r0, [pc, #24]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008576:	f7fa ff0d 	bl	8003394 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800857a:	2280      	movs	r2, #128	@ 0x80
 800857c:	2101      	movs	r1, #1
 800857e:	4804      	ldr	r0, [pc, #16]	@ (8008590 <USBD_LL_Init+0x9c>)
 8008580:	f7fa ff08 	bl	8003394 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20009700 	.word	0x20009700

08008594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f9 fdd9 	bl	8002162 <HAL_PCD_Start>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f97e 	bl	80088b8 <USBD_Get_USB_Status>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	4608      	mov	r0, r1
 80085d4:	4611      	mov	r1, r2
 80085d6:	461a      	mov	r2, r3
 80085d8:	4603      	mov	r3, r0
 80085da:	70fb      	strb	r3, [r7, #3]
 80085dc:	460b      	mov	r3, r1
 80085de:	70bb      	strb	r3, [r7, #2]
 80085e0:	4613      	mov	r3, r2
 80085e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085f2:	78bb      	ldrb	r3, [r7, #2]
 80085f4:	883a      	ldrh	r2, [r7, #0]
 80085f6:	78f9      	ldrb	r1, [r7, #3]
 80085f8:	f7fa fac6 	bl	8002b88 <HAL_PCD_EP_Open>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f958 	bl	80088b8 <USBD_Get_USB_Status>
 8008608:	4603      	mov	r3, r0
 800860a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860c:	7bbb      	ldrb	r3, [r7, #14]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f7fa fb0f 	bl	8002c58 <HAL_PCD_EP_Close>
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f939 	bl	80088b8 <USBD_Get_USB_Status>
 8008646:	4603      	mov	r3, r0
 8008648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800864a:	7bbb      	ldrb	r3, [r7, #14]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	4611      	mov	r1, r2
 8008672:	4618      	mov	r0, r3
 8008674:	f7fa fbe7 	bl	8002e46 <HAL_PCD_EP_SetStall>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f91a 	bl	80088b8 <USBD_Get_USB_Status>
 8008684:	4603      	mov	r3, r0
 8008686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008688:	7bbb      	ldrb	r3, [r7, #14]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fa fc2c 	bl	8002f0e <HAL_PCD_EP_ClrStall>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 f8fb 	bl	80088b8 <USBD_Get_USB_Status>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da0b      	bge.n	8008704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	4613      	mov	r3, r2
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	333e      	adds	r3, #62	@ 0x3e
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	e00b      	b.n	800871c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	4613      	mov	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800871a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7fa f9f9 	bl	8002b3e <HAL_PCD_SetAddress>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f8b0 	bl	80088b8 <USBD_Get_USB_Status>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875c:	7bbb      	ldrb	r3, [r7, #14]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
 8008772:	460b      	mov	r3, r1
 8008774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008784:	7af9      	ldrb	r1, [r7, #11]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	f7fa fb12 	bl	8002db2 <HAL_PCD_EP_Transmit>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 f88f 	bl	80088b8 <USBD_Get_USB_Status>
 800879a:	4603      	mov	r3, r0
 800879c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800879e:	7dbb      	ldrb	r3, [r7, #22]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	607a      	str	r2, [r7, #4]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	460b      	mov	r3, r1
 80087b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80087c6:	7af9      	ldrb	r1, [r7, #11]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	f7fa fa8e 	bl	8002cec <HAL_PCD_EP_Receive>
 80087d0:	4603      	mov	r3, r0
 80087d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f86e 	bl	80088b8 <USBD_Get_USB_Status>
 80087dc:	4603      	mov	r3, r0
 80087de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	460b      	mov	r3, r1
 80087f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087fc:	78fa      	ldrb	r2, [r7, #3]
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f7fa fabe 	bl	8002d82 <HAL_PCD_EP_GetRxCount>
 8008806:	4603      	mov	r3, r0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <HAL_PCDEx_LPM_Callback+0x18>
 8008822:	2b01      	cmp	r3, #1
 8008824:	d01f      	beq.n	8008866 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008826:	e03b      	b.n	80088a0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a1b      	ldr	r3, [r3, #32]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008830:	f000 f83c 	bl	80088ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008834:	4b1c      	ldr	r3, [pc, #112]	@ (80088a8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	4a1b      	ldr	r2, [pc, #108]	@ (80088a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800883a:	f023 0306 	bic.w	r3, r3, #6
 800883e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008852:	f023 0301 	bic.w	r3, r3, #1
 8008856:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fa97 	bl	8006d92 <USBD_LL_Resume>
    break;
 8008864:	e01c      	b.n	80088a0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6812      	ldr	r2, [r2, #0]
 8008874:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fa6e 	bl	8006d66 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008892:	4b05      	ldr	r3, [pc, #20]	@ (80088a8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	4a04      	ldr	r2, [pc, #16]	@ (80088a8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008898:	f043 0306 	orr.w	r3, r3, #6
 800889c:	6113      	str	r3, [r2, #16]
    break;
 800889e:	bf00      	nop
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	e000ed00 	.word	0xe000ed00

080088ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80088b0:	f7f7 fe4e 	bl	8000550 <SystemClock_Config>
}
 80088b4:	bf00      	nop
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d817      	bhi.n	80088fc <USBD_Get_USB_Status+0x44>
 80088cc:	a201      	add	r2, pc, #4	@ (adr r2, 80088d4 <USBD_Get_USB_Status+0x1c>)
 80088ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d2:	bf00      	nop
 80088d4:	080088e5 	.word	0x080088e5
 80088d8:	080088eb 	.word	0x080088eb
 80088dc:	080088f1 	.word	0x080088f1
 80088e0:	080088f7 	.word	0x080088f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
    break;
 80088e8:	e00b      	b.n	8008902 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088ea:	2303      	movs	r3, #3
 80088ec:	73fb      	strb	r3, [r7, #15]
    break;
 80088ee:	e008      	b.n	8008902 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
    break;
 80088f4:	e005      	b.n	8008902 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088f6:	2303      	movs	r3, #3
 80088f8:	73fb      	strb	r3, [r7, #15]
    break;
 80088fa:	e002      	b.n	8008902 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008900:	bf00      	nop
  }
  return usb_status;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <malloc>:
 8008910:	4b02      	ldr	r3, [pc, #8]	@ (800891c <malloc+0xc>)
 8008912:	4601      	mov	r1, r0
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	f000 b82d 	b.w	8008974 <_malloc_r>
 800891a:	bf00      	nop
 800891c:	2000010c 	.word	0x2000010c

08008920 <free>:
 8008920:	4b02      	ldr	r3, [pc, #8]	@ (800892c <free+0xc>)
 8008922:	4601      	mov	r1, r0
 8008924:	6818      	ldr	r0, [r3, #0]
 8008926:	f000 b8f5 	b.w	8008b14 <_free_r>
 800892a:	bf00      	nop
 800892c:	2000010c 	.word	0x2000010c

08008930 <sbrk_aligned>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	4e0f      	ldr	r6, [pc, #60]	@ (8008970 <sbrk_aligned+0x40>)
 8008934:	460c      	mov	r4, r1
 8008936:	6831      	ldr	r1, [r6, #0]
 8008938:	4605      	mov	r5, r0
 800893a:	b911      	cbnz	r1, 8008942 <sbrk_aligned+0x12>
 800893c:	f000 f8ae 	bl	8008a9c <_sbrk_r>
 8008940:	6030      	str	r0, [r6, #0]
 8008942:	4621      	mov	r1, r4
 8008944:	4628      	mov	r0, r5
 8008946:	f000 f8a9 	bl	8008a9c <_sbrk_r>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d103      	bne.n	8008956 <sbrk_aligned+0x26>
 800894e:	f04f 34ff 	mov.w	r4, #4294967295
 8008952:	4620      	mov	r0, r4
 8008954:	bd70      	pop	{r4, r5, r6, pc}
 8008956:	1cc4      	adds	r4, r0, #3
 8008958:	f024 0403 	bic.w	r4, r4, #3
 800895c:	42a0      	cmp	r0, r4
 800895e:	d0f8      	beq.n	8008952 <sbrk_aligned+0x22>
 8008960:	1a21      	subs	r1, r4, r0
 8008962:	4628      	mov	r0, r5
 8008964:	f000 f89a 	bl	8008a9c <_sbrk_r>
 8008968:	3001      	adds	r0, #1
 800896a:	d1f2      	bne.n	8008952 <sbrk_aligned+0x22>
 800896c:	e7ef      	b.n	800894e <sbrk_aligned+0x1e>
 800896e:	bf00      	nop
 8008970:	20009c08 	.word	0x20009c08

08008974 <_malloc_r>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	1ccd      	adds	r5, r1, #3
 800897a:	f025 0503 	bic.w	r5, r5, #3
 800897e:	3508      	adds	r5, #8
 8008980:	2d0c      	cmp	r5, #12
 8008982:	bf38      	it	cc
 8008984:	250c      	movcc	r5, #12
 8008986:	2d00      	cmp	r5, #0
 8008988:	4606      	mov	r6, r0
 800898a:	db01      	blt.n	8008990 <_malloc_r+0x1c>
 800898c:	42a9      	cmp	r1, r5
 800898e:	d904      	bls.n	800899a <_malloc_r+0x26>
 8008990:	230c      	movs	r3, #12
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	2000      	movs	r0, #0
 8008996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a70 <_malloc_r+0xfc>
 800899e:	f000 f869 	bl	8008a74 <__malloc_lock>
 80089a2:	f8d8 3000 	ldr.w	r3, [r8]
 80089a6:	461c      	mov	r4, r3
 80089a8:	bb44      	cbnz	r4, 80089fc <_malloc_r+0x88>
 80089aa:	4629      	mov	r1, r5
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff ffbf 	bl	8008930 <sbrk_aligned>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	4604      	mov	r4, r0
 80089b6:	d158      	bne.n	8008a6a <_malloc_r+0xf6>
 80089b8:	f8d8 4000 	ldr.w	r4, [r8]
 80089bc:	4627      	mov	r7, r4
 80089be:	2f00      	cmp	r7, #0
 80089c0:	d143      	bne.n	8008a4a <_malloc_r+0xd6>
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	d04b      	beq.n	8008a5e <_malloc_r+0xea>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	4639      	mov	r1, r7
 80089ca:	4630      	mov	r0, r6
 80089cc:	eb04 0903 	add.w	r9, r4, r3
 80089d0:	f000 f864 	bl	8008a9c <_sbrk_r>
 80089d4:	4581      	cmp	r9, r0
 80089d6:	d142      	bne.n	8008a5e <_malloc_r+0xea>
 80089d8:	6821      	ldr	r1, [r4, #0]
 80089da:	1a6d      	subs	r5, r5, r1
 80089dc:	4629      	mov	r1, r5
 80089de:	4630      	mov	r0, r6
 80089e0:	f7ff ffa6 	bl	8008930 <sbrk_aligned>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d03a      	beq.n	8008a5e <_malloc_r+0xea>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	442b      	add	r3, r5
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	f8d8 3000 	ldr.w	r3, [r8]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	bb62      	cbnz	r2, 8008a50 <_malloc_r+0xdc>
 80089f6:	f8c8 7000 	str.w	r7, [r8]
 80089fa:	e00f      	b.n	8008a1c <_malloc_r+0xa8>
 80089fc:	6822      	ldr	r2, [r4, #0]
 80089fe:	1b52      	subs	r2, r2, r5
 8008a00:	d420      	bmi.n	8008a44 <_malloc_r+0xd0>
 8008a02:	2a0b      	cmp	r2, #11
 8008a04:	d917      	bls.n	8008a36 <_malloc_r+0xc2>
 8008a06:	1961      	adds	r1, r4, r5
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	6025      	str	r5, [r4, #0]
 8008a0c:	bf18      	it	ne
 8008a0e:	6059      	strne	r1, [r3, #4]
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	bf08      	it	eq
 8008a14:	f8c8 1000 	streq.w	r1, [r8]
 8008a18:	5162      	str	r2, [r4, r5]
 8008a1a:	604b      	str	r3, [r1, #4]
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f000 f82f 	bl	8008a80 <__malloc_unlock>
 8008a22:	f104 000b 	add.w	r0, r4, #11
 8008a26:	1d23      	adds	r3, r4, #4
 8008a28:	f020 0007 	bic.w	r0, r0, #7
 8008a2c:	1ac2      	subs	r2, r0, r3
 8008a2e:	bf1c      	itt	ne
 8008a30:	1a1b      	subne	r3, r3, r0
 8008a32:	50a3      	strne	r3, [r4, r2]
 8008a34:	e7af      	b.n	8008996 <_malloc_r+0x22>
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	bf0c      	ite	eq
 8008a3c:	f8c8 2000 	streq.w	r2, [r8]
 8008a40:	605a      	strne	r2, [r3, #4]
 8008a42:	e7eb      	b.n	8008a1c <_malloc_r+0xa8>
 8008a44:	4623      	mov	r3, r4
 8008a46:	6864      	ldr	r4, [r4, #4]
 8008a48:	e7ae      	b.n	80089a8 <_malloc_r+0x34>
 8008a4a:	463c      	mov	r4, r7
 8008a4c:	687f      	ldr	r7, [r7, #4]
 8008a4e:	e7b6      	b.n	80089be <_malloc_r+0x4a>
 8008a50:	461a      	mov	r2, r3
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	d1fb      	bne.n	8008a50 <_malloc_r+0xdc>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	6053      	str	r3, [r2, #4]
 8008a5c:	e7de      	b.n	8008a1c <_malloc_r+0xa8>
 8008a5e:	230c      	movs	r3, #12
 8008a60:	6033      	str	r3, [r6, #0]
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 f80c 	bl	8008a80 <__malloc_unlock>
 8008a68:	e794      	b.n	8008994 <_malloc_r+0x20>
 8008a6a:	6005      	str	r5, [r0, #0]
 8008a6c:	e7d6      	b.n	8008a1c <_malloc_r+0xa8>
 8008a6e:	bf00      	nop
 8008a70:	20009c0c 	.word	0x20009c0c

08008a74 <__malloc_lock>:
 8008a74:	4801      	ldr	r0, [pc, #4]	@ (8008a7c <__malloc_lock+0x8>)
 8008a76:	f000 b84b 	b.w	8008b10 <__retarget_lock_acquire_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	20009d4c 	.word	0x20009d4c

08008a80 <__malloc_unlock>:
 8008a80:	4801      	ldr	r0, [pc, #4]	@ (8008a88 <__malloc_unlock+0x8>)
 8008a82:	f000 b846 	b.w	8008b12 <__retarget_lock_release_recursive>
 8008a86:	bf00      	nop
 8008a88:	20009d4c 	.word	0x20009d4c

08008a8c <memset>:
 8008a8c:	4402      	add	r2, r0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d100      	bne.n	8008a96 <memset+0xa>
 8008a94:	4770      	bx	lr
 8008a96:	f803 1b01 	strb.w	r1, [r3], #1
 8008a9a:	e7f9      	b.n	8008a90 <memset+0x4>

08008a9c <_sbrk_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	@ (8008ab8 <_sbrk_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f8 f83c 	bl	8000b24 <_sbrk>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_sbrk_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_sbrk_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	20009d48 	.word	0x20009d48

08008abc <__errno>:
 8008abc:	4b01      	ldr	r3, [pc, #4]	@ (8008ac4 <__errno+0x8>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	2000010c 	.word	0x2000010c

08008ac8 <__libc_init_array>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4d0d      	ldr	r5, [pc, #52]	@ (8008b00 <__libc_init_array+0x38>)
 8008acc:	4c0d      	ldr	r4, [pc, #52]	@ (8008b04 <__libc_init_array+0x3c>)
 8008ace:	1b64      	subs	r4, r4, r5
 8008ad0:	10a4      	asrs	r4, r4, #2
 8008ad2:	2600      	movs	r6, #0
 8008ad4:	42a6      	cmp	r6, r4
 8008ad6:	d109      	bne.n	8008aec <__libc_init_array+0x24>
 8008ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8008b08 <__libc_init_array+0x40>)
 8008ada:	4c0c      	ldr	r4, [pc, #48]	@ (8008b0c <__libc_init_array+0x44>)
 8008adc:	f000 f864 	bl	8008ba8 <_init>
 8008ae0:	1b64      	subs	r4, r4, r5
 8008ae2:	10a4      	asrs	r4, r4, #2
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	42a6      	cmp	r6, r4
 8008ae8:	d105      	bne.n	8008af6 <__libc_init_array+0x2e>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af0:	4798      	blx	r3
 8008af2:	3601      	adds	r6, #1
 8008af4:	e7ee      	b.n	8008ad4 <__libc_init_array+0xc>
 8008af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afa:	4798      	blx	r3
 8008afc:	3601      	adds	r6, #1
 8008afe:	e7f2      	b.n	8008ae6 <__libc_init_array+0x1e>
 8008b00:	08008c2c 	.word	0x08008c2c
 8008b04:	08008c2c 	.word	0x08008c2c
 8008b08:	08008c2c 	.word	0x08008c2c
 8008b0c:	08008c30 	.word	0x08008c30

08008b10 <__retarget_lock_acquire_recursive>:
 8008b10:	4770      	bx	lr

08008b12 <__retarget_lock_release_recursive>:
 8008b12:	4770      	bx	lr

08008b14 <_free_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4605      	mov	r5, r0
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	d041      	beq.n	8008ba0 <_free_r+0x8c>
 8008b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b20:	1f0c      	subs	r4, r1, #4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bfb8      	it	lt
 8008b26:	18e4      	addlt	r4, r4, r3
 8008b28:	f7ff ffa4 	bl	8008a74 <__malloc_lock>
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba4 <_free_r+0x90>)
 8008b2e:	6813      	ldr	r3, [r2, #0]
 8008b30:	b933      	cbnz	r3, 8008b40 <_free_r+0x2c>
 8008b32:	6063      	str	r3, [r4, #4]
 8008b34:	6014      	str	r4, [r2, #0]
 8008b36:	4628      	mov	r0, r5
 8008b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b3c:	f7ff bfa0 	b.w	8008a80 <__malloc_unlock>
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d908      	bls.n	8008b56 <_free_r+0x42>
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	1821      	adds	r1, r4, r0
 8008b48:	428b      	cmp	r3, r1
 8008b4a:	bf01      	itttt	eq
 8008b4c:	6819      	ldreq	r1, [r3, #0]
 8008b4e:	685b      	ldreq	r3, [r3, #4]
 8008b50:	1809      	addeq	r1, r1, r0
 8008b52:	6021      	streq	r1, [r4, #0]
 8008b54:	e7ed      	b.n	8008b32 <_free_r+0x1e>
 8008b56:	461a      	mov	r2, r3
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	b10b      	cbz	r3, 8008b60 <_free_r+0x4c>
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d9fa      	bls.n	8008b56 <_free_r+0x42>
 8008b60:	6811      	ldr	r1, [r2, #0]
 8008b62:	1850      	adds	r0, r2, r1
 8008b64:	42a0      	cmp	r0, r4
 8008b66:	d10b      	bne.n	8008b80 <_free_r+0x6c>
 8008b68:	6820      	ldr	r0, [r4, #0]
 8008b6a:	4401      	add	r1, r0
 8008b6c:	1850      	adds	r0, r2, r1
 8008b6e:	4283      	cmp	r3, r0
 8008b70:	6011      	str	r1, [r2, #0]
 8008b72:	d1e0      	bne.n	8008b36 <_free_r+0x22>
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	6053      	str	r3, [r2, #4]
 8008b7a:	4408      	add	r0, r1
 8008b7c:	6010      	str	r0, [r2, #0]
 8008b7e:	e7da      	b.n	8008b36 <_free_r+0x22>
 8008b80:	d902      	bls.n	8008b88 <_free_r+0x74>
 8008b82:	230c      	movs	r3, #12
 8008b84:	602b      	str	r3, [r5, #0]
 8008b86:	e7d6      	b.n	8008b36 <_free_r+0x22>
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	1821      	adds	r1, r4, r0
 8008b8c:	428b      	cmp	r3, r1
 8008b8e:	bf04      	itt	eq
 8008b90:	6819      	ldreq	r1, [r3, #0]
 8008b92:	685b      	ldreq	r3, [r3, #4]
 8008b94:	6063      	str	r3, [r4, #4]
 8008b96:	bf04      	itt	eq
 8008b98:	1809      	addeq	r1, r1, r0
 8008b9a:	6021      	streq	r1, [r4, #0]
 8008b9c:	6054      	str	r4, [r2, #4]
 8008b9e:	e7ca      	b.n	8008b36 <_free_r+0x22>
 8008ba0:	bd38      	pop	{r3, r4, r5, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20009c0c 	.word	0x20009c0c

08008ba8 <_init>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_fini>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr
